{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"What's new","text":"<ul> <li> <p>Introducing Interface MCU</p> <p>The Interface MCU enables onboard debugging and programming, eliminating the need for external tools, while enabling access to board-specific features.</p> <p> Aug 23, 2025 \u30fb  3 min read</p> </li> <li> <p></p> <p>Introducing nRF Connect SDK</p> <p>nRF Connect SDK is a scalable and unified software development kit for building low-power wireless applications based on the Nordic Semiconductor wireless devices.</p> <p> Aug 22, 2025 \u30fb  6 min read</p> </li> <li> <p></p> <p>nRF54L15 Connect Kit Now Available</p> <p>Today, we\u2019re thrilled to launch the nRF54L15 Connect Kit, enabling developers to harness the advanced capabilities of Nordic\u2019s nRF54L15 SoC for cutting-edge IoT designs.</p> <p> Aug 21, 2025 \u30fb  5 min read</p> </li> </ul> <p>View all</p>"},{"location":"LICENSE/","title":"License","text":"<p>This project is licensed under the Apache License 2.0 unless otherwise stated. The nRF Connect SDK and its components are licensed under the 5-Clause Nordic License.</p> <p>This project may include some imported or reused components that are licensed under different terms. Please refer to the license files within those components for details.</p> Apache License 2.05-Clause Nordic License <pre><code>                                Apache License\n                          Version 2.0, January 2004\n                       http://www.apache.org/licenses/\n\n  TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n  1. Definitions.\n\n     \"License\" shall mean the terms and conditions for use, reproduction,\n     and distribution as defined by Sections 1 through 9 of this document.\n\n     \"Licensor\" shall mean the copyright owner or entity authorized by\n     the copyright owner that is granting the License.\n\n     \"Legal Entity\" shall mean the union of the acting entity and all\n     other entities that control, are controlled by, or are under common\n     control with that entity. For the purposes of this definition,\n     \"control\" means (i) the power, direct or indirect, to cause the\n     direction or management of such entity, whether by contract or\n     otherwise, or (ii) ownership of fifty percent (50%) or more of the\n     outstanding shares, or (iii) beneficial ownership of such entity.\n\n     \"You\" (or \"Your\") shall mean an individual or Legal Entity\n     exercising permissions granted by this License.\n\n     \"Source\" form shall mean the preferred form for making modifications,\n     including but not limited to software source code, documentation\n     source, and configuration files.\n\n     \"Object\" form shall mean any form resulting from mechanical\n     transformation or translation of a Source form, including but\n     not limited to compiled object code, generated documentation,\n     and conversions to other media types.\n\n     \"Work\" shall mean the work of authorship, whether in Source or\n     Object form, made available under the License, as indicated by a\n     copyright notice that is included in or attached to the work\n     (an example is provided in the Appendix below).\n\n     \"Derivative Works\" shall mean any work, whether in Source or Object\n     form, that is based on (or derived from) the Work and for which the\n     editorial revisions, annotations, elaborations, or other modifications\n     represent, as a whole, an original work of authorship. For the purposes\n     of this License, Derivative Works shall not include works that remain\n     separable from, or merely link (or bind by name) to the interfaces of,\n     the Work and Derivative Works thereof.\n\n     \"Contribution\" shall mean any work of authorship, including\n     the original version of the Work and any modifications or additions\n     to that Work or Derivative Works thereof, that is intentionally\n     submitted to Licensor for inclusion in the Work by the copyright owner\n     or by an individual or Legal Entity authorized to submit on behalf of\n     the copyright owner. For the purposes of this definition, \"submitted\"\n     means any form of electronic, verbal, or written communication sent\n     to the Licensor or its representatives, including but not limited to\n     communication on electronic mailing lists, source code control systems,\n     and issue tracking systems that are managed by, or on behalf of, the\n     Licensor for the purpose of discussing and improving the Work, but\n     excluding communication that is conspicuously marked or otherwise\n     designated in writing by the copyright owner as \"Not a Contribution.\"\n\n     \"Contributor\" shall mean Licensor and any individual or Legal Entity\n     on behalf of whom a Contribution has been received by Licensor and\n     subsequently incorporated within the Work.\n\n  2. Grant of Copyright License. Subject to the terms and conditions of\n     this License, each Contributor hereby grants to You a perpetual,\n     worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n     copyright license to reproduce, prepare Derivative Works of,\n     publicly display, publicly perform, sublicense, and distribute the\n     Work and such Derivative Works in Source or Object form.\n\n  3. Grant of Patent License. Subject to the terms and conditions of\n     this License, each Contributor hereby grants to You a perpetual,\n     worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n     (except as stated in this section) patent license to make, have made,\n     use, offer to sell, sell, import, and otherwise transfer the Work,\n     where such license applies only to those patent claims licensable\n     by such Contributor that are necessarily infringed by their\n     Contribution(s) alone or by combination of their Contribution(s)\n     with the Work to which such Contribution(s) was submitted. If You\n     institute patent litigation against any entity (including a\n     cross-claim or counterclaim in a lawsuit) alleging that the Work\n     or a Contribution incorporated within the Work constitutes direct\n     or contributory patent infringement, then any patent licenses\n     granted to You under this License for that Work shall terminate\n     as of the date such litigation is filed.\n\n  4. Redistribution. You may reproduce and distribute copies of the\n     Work or Derivative Works thereof in any medium, with or without\n     modifications, and in Source or Object form, provided that You\n     meet the following conditions:\n\n     (a) You must give any other recipients of the Work or\n        Derivative Works a copy of this License; and\n\n     (b) You must cause any modified files to carry prominent notices\n        stating that You changed the files; and\n\n     (c) You must retain, in the Source form of any Derivative Works\n        that You distribute, all copyright, patent, trademark, and\n        attribution notices from the Source form of the Work,\n        excluding those notices that do not pertain to any part of\n        the Derivative Works; and\n\n     (d) If the Work includes a \"NOTICE\" text file as part of its\n        distribution, then any Derivative Works that You distribute must\n        include a readable copy of the attribution notices contained\n        within such NOTICE file, excluding those notices that do not\n        pertain to any part of the Derivative Works, in at least one\n        of the following places: within a NOTICE text file distributed\n        as part of the Derivative Works; within the Source form or\n        documentation, if provided along with the Derivative Works; or,\n        within a display generated by the Derivative Works, if and\n        wherever such third-party notices normally appear. The contents\n        of the NOTICE file are for informational purposes only and\n        do not modify the License. You may add Your own attribution\n        notices within Derivative Works that You distribute, alongside\n        or as an addendum to the NOTICE text from the Work, provided\n        that such additional attribution notices cannot be construed\n        as modifying the License.\n\n     You may add Your own copyright statement to Your modifications and\n     may provide additional or different license terms and conditions\n     for use, reproduction, or distribution of Your modifications, or\n     for any such Derivative Works as a whole, provided Your use,\n     reproduction, and distribution of the Work otherwise complies with\n     the conditions stated in this License.\n\n  5. Submission of Contributions. Unless You explicitly state otherwise,\n     any Contribution intentionally submitted for inclusion in the Work\n     by You to the Licensor shall be under the terms and conditions of\n     this License, without any additional terms or conditions.\n     Notwithstanding the above, nothing herein shall supersede or modify\n     the terms of any separate license agreement you may have executed\n     with Licensor regarding such Contributions.\n\n  6. Trademarks. This License does not grant permission to use the trade\n     names, trademarks, service marks, or product names of the Licensor,\n     except as required for reasonable and customary use in describing the\n     origin of the Work and reproducing the content of the NOTICE file.\n\n  7. Disclaimer of Warranty. Unless required by applicable law or\n     agreed to in writing, Licensor provides the Work (and each\n     Contributor provides its Contributions) on an \"AS IS\" BASIS,\n     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n     implied, including, without limitation, any warranties or conditions\n     of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n     PARTICULAR PURPOSE. You are solely responsible for determining the\n     appropriateness of using or redistributing the Work and assume any\n     risks associated with Your exercise of permissions under this License.\n\n  8. Limitation of Liability. In no event and under no legal theory,\n     whether in tort (including negligence), contract, or otherwise,\n     unless required by applicable law (such as deliberate and grossly\n     negligent acts) or agreed to in writing, shall any Contributor be\n     liable to You for damages, including any direct, indirect, special,\n     incidental, or consequential damages of any character arising as a\n     result of this License or out of the use or inability to use the\n     Work (including but not limited to damages for loss of goodwill,\n     work stoppage, computer failure or malfunction, or any and all\n     other commercial damages or losses), even if such Contributor\n     has been advised of the possibility of such damages.\n\n  9. Accepting Warranty or Additional Liability. While redistributing\n     the Work or Derivative Works thereof, You may choose to offer,\n     and charge a fee for, acceptance of support, warranty, indemnity,\n     or other liability obligations and/or rights consistent with this\n     License. However, in accepting such obligations, You may act only\n     on Your own behalf and on Your sole responsibility, not on behalf\n     of any other Contributor, and only if You agree to indemnify,\n     defend, and hold each Contributor harmless for any liability\n     incurred by, or claims asserted against, such Contributor by reason\n     of your accepting any such warranty or additional liability.\n\n  END OF TERMS AND CONDITIONS\n\n  APPENDIX: How to apply the Apache License to your work.\n\n     To apply the Apache License to your work, attach the following\n     boilerplate notice, with the fields enclosed by brackets \"{}\"\n     replaced with your own identifying information. (Don't include\n     the brackets!)  The text should be enclosed in the appropriate\n     comment syntax for the file format. We also recommend that a\n     file or class name and description of purpose be included on the\n     same \"printed page\" as the copyright notice for easier\n     identification within third-party archives.\n\n  Copyright {yyyy} {name of copyright owner}\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n</code></pre> <pre><code>  LicenseID:  LicenseRef-Nordic-5-Clause\n\n  ExtractedText: &lt;text&gt;\n  Copyright (c) 2018, Nordic Semiconductor ASA\n\n  All rights reserved.\n\n  Redistribution and use in source and binary forms, with or without modification,\n  are permitted provided that the following conditions are met:\n\n  1. Redistributions of source code must retain the above copyright notice, this\n     list of conditions and the following disclaimer.\n\n  2. Redistributions in binary form, except as embedded into a Nordic\n     Semiconductor ASA integrated circuit in a product or a software update for\n     such product, must reproduce the above copyright notice, this list of\n     conditions and the following disclaimer in the documentation and/or other\n     materials provided with the distribution.\n\n  3. Neither the name of Nordic Semiconductor ASA nor the names of its\n     contributors may be used to endorse or promote products derived from this\n     software without specific prior written permission.\n\n  4. This software, with or without modification, must only be used with a\n     Nordic Semiconductor ASA integrated circuit.\n\n  5. Any software provided in binary form under this license must not be reverse\n     engineered, decompiled, modified and/or disassembled.\n\n  THIS SOFTWARE IS PROVIDED BY NORDIC SEMICONDUCTOR ASA \"AS IS\" AND ANY EXPRESS\n  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n  OF MERCHANTABILITY, NONINFRINGEMENT, AND FITNESS FOR A PARTICULAR PURPOSE ARE\n  DISCLAIMED. IN NO EVENT SHALL NORDIC SEMICONDUCTOR ASA OR CONTRIBUTORS BE\n  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE\n  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n  HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\n  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n  OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  &lt;/text&gt;\n</code></pre>"},{"location":"getting-started/","title":"nRF54L15 Connect Kit Quick Start Guide","text":""},{"location":"getting-started/#introduction","title":"Introduction","text":"<p>This quick start guide will navigate you through the process of starting up your new nRF54L15 Connect Kit. The board comes pre-programmed with the Quick Start Demo application, enabling you to explore its various features right out of the box.</p>"},{"location":"getting-started/#requirements","title":"Requirements","text":"<p>Before you start, check that you have the required hardware and software:</p> <ul> <li>1x nRF54L15 Connect Kit</li> <li>1x U.FL cabled 2.4 GHz Antenna (included in the box)</li> <li>1x U.FL cabled 13.56 MHz NFC Antenna (included in the box)</li> <li>1x USB-C Cable</li> <li>A smartphone or a tablet with NFC support</li> <li>A computer running macOS, Ubuntu, or Windows 10 or newer</li> </ul>"},{"location":"getting-started/#installing-nrf-blinky-app","title":"Installing nRF Blinky App","text":"<p>nRF Blinky is a simple mobile app for developers new to Bluetooth Low Energy. It can:</p> <p> Scan and connect to a peripheral device advertising with the proprietary/vendor-specific LED Button Service (LBS) UUID</p> <p> Write to the LED Characteristic to change the state of an LED</p> <p> Be notified when the Button Characteristic changes state because of a button press</p> <p> </p>"},{"location":"getting-started/#setting-up-your-board","title":"Setting up your board","text":"<p> Attach the U.FL cabled 2.4 GHz Antenna.</p> <p> Attach the U.FL cabled 13.56 MHz NFC Antenna.</p> <p> Connect the nRF54L15 Connect Kit to the computer with a USB-C cable.</p> <p></p>"},{"location":"getting-started/#connecting-to-zephyr-shell","title":"Connecting to Zephyr Shell","text":"<p>Once the board is connected, it exposes two COM ports, the primary COM port is connected to the Zephyr Shell whose terminal prompt appears as <code>uart:~$</code>.</p> <p>Open up a serial terminal, specifying the Zephyr Shell COM port:</p> WindowsmacOSUbuntu <ol> <li>Start PuTTY.</li> <li> <p>Configure the correct serial port and click Open:</p> <p></p> </li> </ol> <p>Open up a terminal and run:</p> <pre><code>screen &lt;serial-port-name&gt; 115200\n</code></pre> <p>Open up a terminal and run:</p> <pre><code>screen &lt;serial-port-name&gt; 115200\n</code></pre> <p>Press the DFU/RST button to reset the nRF54L15. Observe the output of the terminal. You should see the output, similar to what is shown in the following:</p> Terminal<pre><code>*** Booting Quick Start Demo v3.1.0-5da6f6aae060 ***\n*** Using nRF Connect SDK v3.1.0-6c6e5b32496e ***\n*** Using Zephyr OS v4.1.99-1612683d4010 ***\n[00:00:00.001,155] &lt;inf&gt; main: NFC configuration done\n[00:00:00.001,802] &lt;inf&gt; fs_zms: 2 Sectors of 4096 bytes\n[00:00:00.001,812] &lt;inf&gt; fs_zms: alloc wra: 0, c60\n[00:00:00.001,819] &lt;inf&gt; fs_zms: data wra: 0, 190\n[00:00:00.002,139] &lt;inf&gt; bt_sdc_hci_driver: SoftDevice Controller build revision:\n                                            fc de 41 eb a2 d1 42 24  00 b5 f8 57 9f ac 9d 9e |..A...B$ ...W....\n                                            aa c9 b4 34                                      |...4\n[00:00:00.003,843] &lt;inf&gt; bt_hci_core: HW Platform: Nordic Semiconductor (0x0002)\n[00:00:00.003,858] &lt;inf&gt; bt_hci_core: HW Variant: nRF54Lx (0x0005)\n[00:00:00.003,871] &lt;inf&gt; bt_hci_core: Firmware: Standard Bluetooth controller (0x00) Version 252.16862 Build 1121034987\n[00:00:00.004,026] &lt;inf&gt; bt_hci_core: No ID address. App must call settings_load()\n[00:00:00.004,033] &lt;inf&gt; main: Bluetooth initialized\n[00:00:00.004,528] &lt;inf&gt; bt_hci_core: HCI transport: SDC\n[00:00:00.004,578] &lt;inf&gt; bt_hci_core: Identity: EF:11:48:A5:EA:6D (random)\n[00:00:00.004,595] &lt;inf&gt; bt_hci_core: HCI: version 6.1 (0x0f) revision 0x3069, manufacturer 0x0059\n[00:00:00.004,610] &lt;inf&gt; bt_hci_core: LMP: version 6.1 (0x0f) subver 0x3069\n[00:00:00.006,087] &lt;inf&gt; main: Advertising successfully started\nuart:~$\n</code></pre> <p>Type Tab to list all supported commands. When you type a command with <code>--help</code>, the terminal shows its usage, for example <code>gpio --help</code>:</p> Terminal<pre><code>uart:~$\n  adc      bt       clear    date     device   devmem   gatt     gpio\n  help     history  kernel   log      rem      resize   retval   shell\n  stats\nuart:~$ gpio --help\ngpio - GPIO commands\nSubcommands:\n  conf     : Configure GPIO pin\n             Usage: gpio conf &lt;device&gt; &lt;pin&gt; &lt;configuration\n             &lt;i|o&gt;[u|d][h|l][0|1]&gt; [vendor specific]\n             &lt;i|o&gt; - input|output\n             [u|d] - pull up|pull down, otherwise open\n             [h|l] - active high|active low, otherwise defaults to active high\n             [0|1] - initialise to logic 0|logic 1, otherwise defaults to logic\n             0\n             [vendor specific] - configuration flags within the mask 0xFF00\n             see include/zephyr/dt-bindings/gpio/\n  get      : Get GPIO pin value\n             Usage: gpio get &lt;device&gt; &lt;pin&gt;\n  set      : Set GPIO pin value\n             Usage: gpio set &lt;device&gt; &lt;pin&gt; &lt;level 0|1&gt;\n  toggle   : Toggle GPIO pin\n             Usage: gpio toggle &lt;device&gt; &lt;pin&gt;\n  devices  : List all GPIO devices\n             Usage: gpio devices\n  blink    : Blink GPIO pin\n             Usage: gpio blink &lt;device&gt; &lt;pin&gt;\n  info     : GPIO Information\n             Usage: gpio info [device]\n</code></pre>"},{"location":"getting-started/#led-blinking-test","title":"LED Blinking Test","text":"<p>Now you can blink the Green LED using GPIO commands in the Zephyr Shell.</p> <ol> <li> <p>To control the Green LED, configure the GPIO pin P0.2 as an output:</p> <pre><code>gpio conf gpio0 2 o\n</code></pre> </li> <li> <p>Blink the Green LED using the <code>gpio blink</code> command:</p> <pre><code>gpio blink gpio0 2\n</code></pre> </li> <li> <p>The Green LED starts to blink. Observe the output of the terminal. You should see the output, similar to what is shown in the following:</p> Terminal<pre><code>uart:~$ gpio conf gpio0 2 o\nuart:~$ gpio blink gpio0 2\nHit any key to exit\n</code></pre> </li> <li> <p>Hit any key in the Shell to stop the LED blinking.</p> </li> </ol>"},{"location":"getting-started/#button-input-test","title":"Button Input Test","text":"<p>When the application starts, it prints any input event using the Input APIs. Press the USR button and observe the output of the terminal. You should see the output, similar to what is shown in the following:</p> Terminal<pre><code>[00:20:46.758,664] &lt;inf&gt; input: input event: dev=buttons SYN type= 1 code= 11 value=1\n[00:20:47.441,742] &lt;inf&gt; input: input event: dev=buttons SYN type= 1 code= 11 value=0\n[00:36:18.853,192] &lt;inf&gt; input: input event: dev=buttons SYN type= 1 code= 11 value=1\n[00:36:19.004,974] &lt;inf&gt; input: input event: dev=buttons SYN type= 1 code= 11 value=0\nuart:~$ \n</code></pre>"},{"location":"getting-started/#nfc-tag-test","title":"NFC Tag Test","text":"<p>When the application starts, it initializes the NFC tag and generates a URI message with a URI record containing the URL \"https://makerdiary.com\". Test it by performing the following steps:</p> <ol> <li> <p>Touch the NFC antenna with the smartphone or tablet.</p> </li> <li> <p>Observe that the smartphone or tablet tries to open the URL \"https://makerdiary.com\" in a web browser.</p> </li> </ol> <p></p>"},{"location":"getting-started/#ble-connectivity-test","title":"BLE Connectivity Test","text":"<p>The application exposes a Nordic LED Button Service (LBS). It sends the state of USR button on the board to the connected device, such as a phone or tablet. The nRF Blinky app can display the received button state and control the state of Green LED on the board. Test it by performing the following steps:</p> <ol> <li> <p>Open the nRF Blinky app, observe that the board is advertising with the Device Name Nordic_LBS.</p> <p></p> </li> <li> <p>Tap Nordic_LBS to establish a connection with the board, then:</p> <ul> <li>Toggle the LED switch in the app to turn the Green LED ON/OFF</li> <li>Press the USR button on the board, and the app will show its state (Pressed/Released)</li> </ul> <p></p> </li> </ol>"},{"location":"getting-started/#next-steps","title":"Next steps","text":"<p>Congratulations! You've completed the quick start guide and explored some features of the Out-of-Box application. There is much more to explore. Check out our developer guides:</p> <ul> <li> <p> Develop with nRF Connect SDK</p> <p>Set up the nRF Connect SDK development environment, build and run the tested applications and samples.</p> <p> Learn More</p> </li> <li> <p> Programming Guide</p> <p>Provide comprehensive instructions for programming the nRF54L15 and updating the Interface MCU Firmware.</p> <p> Learn More</p> </li> </ul>"},{"location":"hardware/","title":"Hardware description","text":"<p>This section of the documentation specifies and describes the nRF54L15 Connect Kit mainly from a hardware point of view.</p>"},{"location":"hardware/#hardware-diagram","title":"Hardware diagram","text":"<p>The following figure illustrates the nRF54L15 Connect Kit hardware diagram. The design has loose or pre-soldered pin headers available.</p> <p></p> <p></p>"},{"location":"hardware/#mechanical-dimensions","title":"Mechanical dimensions","text":"<p>The nRF54L15 Connect Kit is a 4-layer chem. Gold, 55.88mm x 20.32mm (2.2\" x 0.8\") 1mm thick PCB with a USB Type-C port, LEDs, Buttons, U.FL receptacles and 40x castellated/through-hole pins.</p> <p> Download DXF Files</p> <p></p>"},{"location":"hardware/#power-supply","title":"Power supply","text":"<p>The nRF54L15 Connect Kit can be powered through either the USB-C port or the VSYS pin (1.8-5.5V input range). The board contains a TPS63901 buck-boost converter with 75-nA quiescent current and 1.8V/3.3V configurable power supply for I/Os.</p> <p>The following figure describes the power supply architecture:</p> <p></p> <p>VBUS is the 5V input from the USB-C port. There are two parallel Schottky diodes between VBUS and VSYS, which add flexibility by allowing power ORing of different supplies into VSYS.</p> <p>Set ENABLE <code>HIGH</code> to enable VDD_GPIO output and <code>LOW</code> to disable VDD_GPIO output. This pin has a pull-up resistor (1MOhm) and can be tied to GND to place the board in Power-Down mode.</p> <p>IF_P0.8 controls VDD_GPIO voltage selection: <code>HIGH</code> = 1.8 V, <code>LOW</code> = 3.3 V. This pin has a pull-down resistor (1MOhm), which sets the default VDD_GPIO voltage to 3.3 V.</p> <p>Powering the board</p> <p>The nRF54L15 Connect Kit features flexible power management, supporting USB-C, external power supplies, or batteries.</p> Using USB-C portFeeding VSYS directlyFeeding VSYS via a Schottky diodeFeeding VSYS via a P-MOSFETUsing a battery charger <p>This is the simplest way to power the board, which will power VSYS (and therefore the system) from the 5V USB VBUS voltage, through two internal Schottky diodes (so VSYS becomes VBUS minus the Schottky diode forward voltage).</p> <p></p> <p>If the USB-C port is NOT going to be used, it is safe to power the board by directly connecting VSYS to your preferred power source (in the range 1.8V to 5.5V).</p> <p></p> <p>To safely add a second power source to the board, simply feed VSYS through an external Schottky diode.</p> <p></p> <p>An improved way to power from a second source is using an external P-MOSFET to replace the Schottky diode as shown in the following figure.</p> <p></p> <p>The nRF54L15 Connect Kit can be also used with a battery charger with power path manager which will automatically and seamlessly switch between the input source and the battery power.</p> <p></p>"},{"location":"hardware/#interface-mcu","title":"Interface MCU","text":"<p>The nRF54L15 Connect Kit features an nRF52820-based Interface MCU that enables onboard debugging and programming, eliminating the need for external tools. The Interface MCU also includes a USB-UART bridge for log, trace and terminal emulation, and an Interface Shell bundled with helpful commands to access the board-specific functionality.</p> <p>The following figure describes the functional architecture of the Interface MCU:</p> <p></p> <p></p> <p>The following table describes the pin functions of the Interface MCU:</p> Pin name Description P0.0 GPIO pin used for SWCLK output. Connect to the SWCLK pin of nRF54L15. P0.1 GPIO pin used for SWDIO input/output. Connect to the SWDIO pin of nRF54L15. P0.2 General purpose I/O.  SDA pin of the I2C bus. P0.3 General purpose I/O.  SCL pin of the I2C bus. P0.4/RX RXD pin of the UART bridge. Connect to the P0.0 pin of nRF54L15. P0.5/TX TXD pin of the UART bridge. Connect to the P0.1 pin of nRF54L15. P0.7 GPIO pin used for RESET output. Connect to the RESET pin of nRF54L15. P0.8 GPIO pin used to select the voltage of VDD_GPIO. Connect to the SEL pin of TPS63901 through a 1-M\u03a9 pulldown resistor. Selects 1.8V when a high level is applied to this pin. Selects 3.3V when a low level is applied to this pin. P0.14 GPIO pin used to control the Blue LED of RGB LED driven by a MOS switch. A high level applied to this pin turns on the LED and a low level turns it off. P0.15 GPIO pin used to control the Green LED of RGB LED driven by a MOS switch. A high level applied to this pin turns on the LED and a low level turns it off. P0.20 GPIO pin used to control the Red LED of RGB LED driven by a MOS switch. A high level applied to this pin turns on the LED and a low level turns it off. P0.30 GPIO pin used to detect button press of the DFU/RST button. This pin pulls to GND when the button is pressed."},{"location":"hardware/#general-purpose-ios","title":"General purpose I/Os","text":"<p>There are up to 31 multi-function General Purpose I/Os (8 can be configured as ADC inputs) available on the header pins. These GPIOs are powered from the VDD_GPIO rail which is 1.8V or 3.3V configurable. </p> <p>Dedicated pins</p> <p>Some pins on the device are dedicated for a specific purpose. GPIO pin routing and configuration is flexible. Some pins have limitations or recommendations for configuration and use. For details, see Pin assignments.</p> <p>The following figure illustrates the GPIOs pinout:</p> <p></p>"},{"location":"hardware/#buttons","title":"Buttons","text":"<p>The nRF54L15 Connect Kit has two on-board push-buttons, one labeled with USR is connected to the <code>P0.3</code> of nRF54L15, the other labeled with DFU/RST is connected to the <code>P0.30</code> of the Interface MCU (nRF52820).</p> <p>The following table describes the function of the buttons:</p> Button GPIO Description USR <code>P0.3</code>  nRF54L15 User programmable push-button controlled by nRF54L15. The <code>P0.3</code> pin pulls to GND when the button is pressed DFU/RST <code>P0.30</code>  nRF52820 This push-button is controlled by nRF52820 and its behavior depends on the Interface MCU firmware.  The <code>P0.30</code> pin pulls to GND when the button is pressed.  Push and hold this button and then power up the board, the board will run into the Interface MCU UF2 Bootloader Mode.  In Interface MCU Normal Mode, pushing this button resets the nRF54L15."},{"location":"hardware/#leds","title":"LEDs","text":"<p>The nRF54L15 Connect Kit has one Green LED controlled by nRF54L15 and one RGB LED controlled by the Interface MCU (nRF52820). Each LED is driven by a MOS switch and powered from the VSYS rail. A high level applied to the GPIO pin turns on the LED and a low level turns it off.</p> <p>The following figure shows the connection and behavior of each LED:</p> LED GPIO Description Green LED <code>P0.2</code>  nRF54L15 User programmable LED. RGB LED - Green <code>P0.15</code>  nRF52820 Indicates the UF2 Bootloader state. Blinks fast when updating the firmware, and breathes slow when in idle state. RGB LED - Red <code>P0.20</code>  nRF52820 Indicates the UART bridge state. Blinks fast when any UART bridge transmission is enabled, and stays off when in idle state. RGB LED - Blue <code>P0.14</code>  nRF52820 Indicates the CMSIS-DAP state. Blinks fast when any DAP transmission is enabled, and stays off when in idle state."},{"location":"hardware/#24-ghz-antenna-interface","title":"2.4 GHz antenna interface","text":"<p>The nRF54L15 Connect Kit has a U.FL receptacle for the external 2.4 GHz antenna. Included with the kit is a U.FL cabled 2.4 GHz antenna.</p> <p>The following figure shows how to attach the U.FL cabled 2.4 GHz antenna:</p> <p></p>"},{"location":"hardware/#nfc-antenna-interface","title":"NFC antenna interface","text":"<p>The nRF54L15 Connect Kit has a U.FL receptacle for the external NFC antenna. Included with the kit is a U.FL cabled 13.56MHz NFC antenna.</p> <p>NFC uses pins <code>NFC1</code> and <code>NFC2</code> to connect the antenna. These pins are shared with GPIOs <code>P1.02</code> and <code>P1.03</code>. The <code>PROTECT</code> field of the <code>NFCPINS</code> register in User Information Configuration Registers (UICR) defines the usage of these pins and their protection level against abnormal voltages. The content of the <code>NFCPINS</code> register is reloaded at every reset.</p> <p>The following figure shows how to attach the U.FL cabled NFC antenna:</p> <p></p>"},{"location":"hardware/#debug-interface","title":"Debug interface","text":"<p>The nRF54L15 Connect Kit supports Arm Serial Wire Debug (SWD) port, which makes it possible to connect external debuggers for debugging and programming. Note that the signal voltage levels of SWD should match to VDD_GPIO.</p> <p>The following figure illustrates the SWD port of the nRF54L15:</p> <p></p> <p>Connect the external debugger to nRF54L15</p> <p>The SWD port of nRF54L15 is default connected to the Interface MCU's DAP interface. If an external debugger is wired to the SWD port of nRF54L15, the Interface MCU's DAP interface should be disabled.</p> <p>The SWD port of Interface MCU (nRF52820) is also available for use. Note that the signal voltage levels of SWD should match to VDD_GPIO.</p> <p>The following figure illustrates the SWD port of the Interface MCU (nRF52820):</p> <p></p>"},{"location":"hardware/#test-points","title":"Test points","text":"<p>The test points are exposed on the bottom of the board for debugging, testing, and validation purposes during development and production.</p> <p>The following figure illustrates the test points:</p> <p></p> <p>The following table describes the functions of the test points:</p> Test Point Name Description TP1 IF_USB_DP USB D+ signal of the Interface MCU (nRF52820). TP2 IF_USB_DM USB D- signal of the Interface MCU (nRF52820). TP3 IF_RESET RESET pin of the Interface MCU (nRF52820). TP4 IF_SWCLK Serial wire debug clock input of the Interface MCU (nRF52820). TP5 IF_SWDIO Serial wire debug I/O of the Interface MCU (nRF52820)."},{"location":"introduction/","title":"nRF54L15 Connect KitRapid Prototyping Kit for Your Next-Gen IoT Devices powered by the nRF54L15 Multiprotocol SoC","text":""},{"location":"introduction/#introduction","title":"Introduction","text":"<p>nRF54L15 Connect Kit is a rapid prototyping kit built around the nRF54L15 multiprotocol SoC featuring a 128 MHz Arm Cortex\u00ae-M33 processor and a 128 MHz RISC-V coprocessor with 1.5 MB NVM and 256 KB RAM. It supports Bluetooth Low Energy 6.0, Thread\u00ae, Matter, Zigbee\u00ae, 4 Mbps proprietary 2.4 GHz mode, NFC and enhanced security.</p> <p>The design integrates an nRF52820-based Interface MCU that enables onboard debugging and programming, eliminating the need for external tools. The Interface MCU also includes a USB-UART bridge for log, trace and terminal emulation, and an Interface Shell bundled with helpful commands to access the board-specific functionality.</p> <p>The board contains a TPS63901 buck-boost converter with 75-nA quiescent current and 1.8V/3.3V configurable power supply for I/Os, supporting various options for easily powering the unit from USB-C, external supplies or batteries.</p> <p>It also has USB-C, LEDs, Buttons, U.FL receptacles for U.FL cabled 2.4 GHz Antenna and 13.56 MHz NFC Antenna, Arm Serial Wire Debug (SWD) port and dual-row 40 pins with loose or pre-soldered headers available.</p> <p>nRF Connect SDK is supported, including the Zephyr RTOS. Developers can explore the full potential of the nRF54L15 using the extensive range of software samples, modules, and libraries available within the nRF Connect SDK. It is open source, and can be leveraged and modified to suit your specific needs.</p> <p></p>"},{"location":"introduction/#key-features","title":"Key Features","text":"<ul> <li> <p>Nordic Semiconductor nRF54L15 SoC</p> <ul> <li>128 MHz Arm Cortex\u00ae-M33 processor and 128 MHz RISC-V coprocessor</li> <li>1.5 MB NVM and 256 KB RAM</li> <li>Multiprotocol 2.4 GHz radio supporting Bluetooth Low Energy, 802.15.4-2020, and 2.4 GHz   proprietary modes (up to 4 Mbps)</li> <li>Advanced security features with physical protection</li> <li>Global RTC (GRTC) available in System OFF mode</li> <li>5x SPI/UART/I2C, 3x PWM, 2x QDEC, I2S, PDM, 14-bit ADC, GPIOs</li> <li>Integrated NFC-A Tag</li> </ul> </li> <li> <p>On-board Interface MCU</p> <ul> <li>Built using nRF52820 with 64 MHz Arm Cortex-M4, 256 KB Flash &amp; 32 KB RAM</li> <li>Built-in CMSIS-DAP support for debugging and programming</li> <li>USB-UART bridge for log, trace and terminal emulation</li> <li>Interface Shell with helpful commands to access the board-specific functionality</li> <li>Self-upgradable UF2 Bootloader featuring drag-and-drop programming for Interface MCU firmware update</li> <li>Open source and more features will be released gradually over time</li> </ul> </li> <li> <p>TPS63901 buck-boost converter with 75-nA quiescent current and 1.8V/3.3V configurable power supply for I/Os</p> </li> <li>Shipped with U.FL cabled 2.4 GHz Antenna and 13.56 MHz NFC Antenna</li> <li>Up to 31 multi-function GPIOs (8 can be configured as ADC inputs) through edge pins</li> <li>Arm Serial Wire Debug (SWD) port through edge pins</li> <li>USB-C, LEDs, Buttons and U.FL receptacles</li> <li>Dual-row 40 pins in 55.88mm x 20.32mm (2.2\" x 0.8\") DIP/SMT form factor</li> <li>Available in Loose or Pre-soldered headers options</li> <li>Built on open source, supporting nRF Connect SDK and Zephyr RTOS, etc</li> </ul>"},{"location":"introduction/#hardware-diagram","title":"Hardware Diagram","text":""},{"location":"introduction/#whats-in-the-box","title":"What's in the box","text":"Part Quantity nRF54L15 Connect Kit Board (Loose or Pre-soldered Headers) 1 U.FL cabled 2.4 GHz Antenna 1 U.FL cabled 13.56 MHz NFC Antenna 1"},{"location":"purchase/","title":"Purchase","text":""},{"location":"purchase/#buy-online","title":"Buy Online","text":"<p>nRF54L15 Connect Kit is available on the following channels (click to go directly to the product):</p>"},{"location":"purchase/#request-large-volume-pricing","title":"Request Large Volume Pricing","text":"<p>Thank you for your interest in purchasing large volume from Makerdiary. In order to help you more efficiently, please contact us:</p> <p>Request Quote</p>"},{"location":"purchase/#design-customization","title":"Design &amp; Customization","text":"<p>We are ready to customize our hardware and firmware to better meet your solution's needs. Many of our platforms are prepared for customization.</p> <p>If you would like to do some serious business, feel free to contact us and we'll reply before you know it:</p> <p>Design Services</p>"},{"location":"resources/","title":"Resources","text":""},{"location":"resources/#technical-documentation","title":"Technical documentation","text":"<ul> <li>nRF54L5 Connect Kit Product Brief</li> <li>nRF54L5 Connect Kit Quick Start Guide</li> <li>Developing with nRF Connect SDK</li> <li>Programming Guide</li> </ul>"},{"location":"resources/#hardware-resource","title":"Hardware resource","text":"<ul> <li>nRF54L5 Connect Kit Hardware Description</li> <li>nRF54L5 Connect Kit Pinout Diagram Rev.A</li> <li>nRF54L5 Connect Kit Schematic Rev.A</li> <li>nRF54L5 Connect Kit Board DXF Files Rev.A</li> <li>nRF54L5 Connect Kit 3D Model Rev.A</li> </ul>"},{"location":"resources/#regulatory-compliance","title":"Regulatory &amp; Compliance","text":"<ul> <li>FCC Supplier's Declaration of Conformity (SDoC)</li> <li>EU Declaration of Conformity (DoC)</li> <li>RoHS &amp; REACH Declaration of Conformity</li> </ul>"},{"location":"revision-history/","title":"Revision history","text":""},{"location":"revision-history/#hardware","title":"Hardware","text":""},{"location":"revision-history/#REVA","title":"Rev.A May 29, 2025","text":"<ul> <li>The first public release</li> </ul>"},{"location":"revision-history/#software-documentation","title":"Software &amp; Documentation","text":"<p>Versioning</p> <p>The Software &amp; Documentation is versioned together with the nRF Connect SDK. This means that every time that nRF Connect SDK is tagged, this repository is tagged as well with the same version number.</p>"},{"location":"revision-history/#DOC_v3.1.0","title":"v3.1.0 Aug 21, 2025","text":"<ul> <li>The first public release</li> </ul>"},{"location":"troubleshooting/","title":"Troubleshooting","text":"<p>It may happen that you run into trouble while getting started with your new nRF54L15 Connect Kit. This page is here to help you solve the most common problems. If you have a new problem, you can create a new issue or discuss it on GitHub Discussions.</p>"},{"location":"troubleshooting/#which-com-port-is-connected-to-nrf54l15","title":"Which COM port is connected to nRF54L15","text":"<p>The Interface MCU exposes two COM ports, the primary COM acts as a UART bridge between the host and the nRF54L15, and the secondary COM is connected to the Interface Shell whose terminal prompt appears as <code>ifsh:~$</code>.</p>"},{"location":"troubleshooting/#udev-rules-on-linux","title":"udev rules on Linux","text":"<p>On Linux, particularly Ubuntu 16.04+, you must configure udev rules to allow pyOCD to access debug probes from user space. Otherwise you will need to run pyOCD as root, using sudo, which is very highly discouraged. (You should never run pyOCD as root on any OS.)</p> <p>To install, copy the rules file in the udev folder. to <code>/etc/udev/rules.d/</code> on Ubuntu:</p> <pre><code>sudo cp 50.zephyr-dap.rules /etc/udev/rules.d\n</code></pre> <p>To see your changes without a reboot, you can force the udev system to reload:</p> <pre><code>sudo udevadm control --reload\n</code></pre> <pre><code>udo udevadm trigger\n</code></pre> <p>By default, the rules provide open access to the CMSIS-DAP interface for all users (0666 permissions). If you share your Linux system with other users, or just don't like the idea of write permission for everybody, you can replace <code>MODE:=\"0666\"</code> with <code>OWNER:=\"yourusername\"</code> to create the device owned by you, or with <code>GROUP:=\"somegroupname\"</code> and mange access using standard Unix groups.</p>"},{"location":"blog/","title":"Latest posts","text":""},{"location":"blog/introducing-interface-mcu/","title":"Introducing Interface MCU","text":""},{"location":"blog/introducing-interface-mcu/#introducing-interface-mcu","title":"Introducing Interface MCU","text":""},{"location":"blog/introducing-interface-mcu/#introduction","title":"Introduction","text":"<p>The nRF54L15 Connect Kit comes with an nRF52820-based Interface MCU. The Interface MCU Firmware is running on the nRF52820. It implements a CMSIS-DAP interface for debugging and programming the nRF54L15. It also exposes two USB CDC ACM devices, one acts as a UART bridge between the host and the nRF54L15, the other enables an Interface Shell for accessing board-specific functionality.</p> <p>The Interface MCU also comes pre-programmed with the UF2 Bootloader, an easy-to-use and self-upgradable bootloader that can be used to update the firmware by just copying the .uf2-format images to the flash drive without using an external programmer.</p> <p>The following figure describes the functional architecture of the Interface MCU:</p> <p></p> <p></p>"},{"location":"blog/introducing-interface-mcu/#why-choose-the-nrf52820","title":"Why Choose the nRF52820","text":"<p>The nRF52820, with its rich feature set and low-power design, is an excellent choice for implementing an Interface MCU.</p> <ul> <li>Low Power Consumption: Ultra-low power is in Nordic's DNA. The nRF52820 draws less than 1 \u00b5A in System OFF mode, making it an ideal choice for battery-powered applications.</li> <li>High Performance: The nRF52820 features a 64 MHz Arm Cortex-M4 processor with 256 KB Flash and 32 KB RAM.</li> <li>Full Speed USB 2.0: The nRF52820 integrates a USB 2.0 full speed (12 Mbps) controller, which allows the SoC to support multiple functions, such as HID and CDC, simultaneously.</li> <li>Cost-Effective: The nRF52820 integrates many features into a single chip, reducing the need for additional external components. This integration lowers the overall Bill of Materials (BOM).</li> <li>Comprehensive Development Ecosystem: Compatible with Nordic\u2019s nRF Connect SDK. This makes it easier to develop and debug applications.</li> </ul>"},{"location":"blog/introducing-interface-mcu/#getting-started-with-the-interface-mcu","title":"Getting Started with the Interface MCU","text":"<p>The Interface MCU firmware is open source, and detailed documentation is available to help you get started.</p> <ul> <li>Interface MCU Firmware Source Code</li> <li>Interface MCU Firmware Documentation</li> </ul>"},{"location":"blog/introducing-nrf-connect-sdk/","title":"Introducing nRF Connect SDK","text":""},{"location":"blog/introducing-nrf-connect-sdk/#introducing-nrf-connect-sdk","title":"Introducing nRF Connect SDK","text":""},{"location":"blog/introducing-nrf-connect-sdk/#overview","title":"Overview","text":"<p>nRF Connect SDK is a scalable and unified software development kit for building low-power wireless applications based on the Nordic Semiconductor nRF54, nRF53, nRF52, nRF70, or nRF91 Series wireless devices. It offers an extensible framework for building size-optimized software for memory-constrained devices as well as powerful and complex software for more advanced devices and applications.</p> <p>It integrates the Zephyr Real-Time Operating System (RTOS) and a wide range of complete applications, samples, and protocol stacks such as Bluetooth Low Energy, Bluetooth mesh, Wi-Fi, Matter, Thread/Zigbee and LTE-M/NB-IoT/GPS, TCP/IP. It also includes middleware such as CoAP, MQTT, LwM2M, various libraries, hardware drivers, Trusted Firmware-M for security, and a secure bootloader (MCUBoot).</p> <p>The following figure illustrates the architecture of the nRF Connect SDK, where Zephyr RTOS and third-party components (Ex: MCUBoot, Trusted Firmware-M) are shown in dark blue:</p> <p></p>"},{"location":"blog/introducing-nrf-connect-sdk/#about-zephyr-rtos","title":"About Zephyr RTOS","text":"<p>Zephyr RTOS is an open-source real-time operating system for connected and resource-constrained embedded devices. It includes a scheduler that ensures predictable/deterministic execution patterns and abstracts out the timing requirements. It also comes with a rich set of fundamental libraries and middleware that simplifies development and helps reduce a product\u2019s time to market. Zephyr RTOS is highly configurable and enables scalable configurations from very small configurations for memory-constrained devices (minimum 8 kilobytes, for example, simple LED blinking application) to powerful, feature-rich, high-processing power devices (multiple MBs of memory) with large memory configurations.</p> <p>Zephyr RTOS</p>"},{"location":"blog/introducing-nrf-connect-sdk/#how-nrf-connect-sdk-code-is-organized","title":"How nRF Connect SDK code is organized","text":"<p>The nRF Connect SDK offers a single code base for all of Nordic\u2019s devices and software components. It simplifies porting modules, libraries, and drivers from one application to another, thus reducing development time. By enabling developers to pick and choose the essential software components for their application, high memory efficiency is guaranteed. The nRF Connect SDK is publicly hosted on GitHub.</p> <p>Internally, the nRF Connect SDK code is organized into four <code>main</code> repositories:</p> <ul> <li><code>nrf</code> \u2013 Applications, samples, connectivity protocols (Nordic)</li> <li><code>nrfxlib</code> \u2013 Common libraries and stacks (Nordic)</li> <li><code>Zephyr</code> \u2013 RTOS &amp; Board configurations (open source)</li> <li><code>MCUBoot</code> \u2013 Secure Bootloader (open source)</li> </ul> <p>In addition to the four main repositories, there are also other repositories like the TrustedFirmware-M repository and the Matter repository.</p>"},{"location":"blog/introducing-nrf-connect-sdk/#tools-and-configuration","title":"Tools and configuration","text":"<p>The figure below visualizes the toolchain in the nRF Connect SDK, which is based on the Zephyr toolchain. You can see a set of different tools, each playing a role in the creation of an application, from configuring the system to building it.</p> <p></p> <p>Kconfig generates definitions that configure the whole system, for example which wireless protocol or which libraries to include in your application. Devicetree describes the hardware. CMake then uses the information from Kconfig and the devicetree to generate build files, which Ninja will use to build the program. The GCC compiler system is used to create the executables.</p> <p>This high decoupling of the source code (<code>*.c</code>) and the configuration system through Kconfig (<code>*.conf</code>) and the hardware description system through devicetree (<code>*.dts</code>) makes it easy to use the same application source code on different hardware and with different configurations with minimal changes. This has a huge impact on the ease of portability and maintainability.</p> <p></p>"},{"location":"blog/introducing-nrf-connect-sdk/#next-steps","title":"Next steps","text":"<p>Now that we have an understanding of the content and structure of the nRF Connect SDK, let\u2019s move to the developer guides which will step you through the basics of nRF Connect SDK development and show you how to implement typical use cases with Nordic Semiconductor libraries and drivers on the nRF54L15 Connect Kit.</p> <p>nRF Connect SDK Developer Guides</p>"},{"location":"blog/nrf54l15-connect-kit-now-available/","title":"nRF54L15 Connect Kit Now Available","text":""},{"location":"blog/nrf54l15-connect-kit-now-available/#nrf54l15-connect-kit-now-available","title":"nRF54L15 Connect Kit Now Available","text":""},{"location":"blog/nrf54l15-connect-kit-now-available/#introduction","title":"Introduction","text":"<p>Today, we\u2019re thrilled to launch the nRF54L15 Connect Kit, enabling developers to harness the advanced capabilities of Nordic\u2019s nRF54L15 SoC for cutting-edge IoT designs.</p> <p>Built on the experience from the successful nRF52 Series\u2014shipped in the billions and trusted by thousands of developers\u2014the nRF54L Series is set to be a worthy successor. The nRF54L Series enables the creation of innovative next-generation IoT products. It simplifies design challenges and ensures reliable wireless communication while raising the bar on achievable battery lifetime.</p>"},{"location":"blog/nrf54l15-connect-kit-now-available/#key-features-of-the-nrf54l15-connect-kit","title":"Key Features of the nRF54L15 Connect Kit","text":"<ul> <li> <p>Powered by nRF54L15 SoC</p> <p>nRF54L15 is a ultra-low-power wireless SoC featuring a 128 MHz Arm Cortex\u00ae-M33 processor and a 128 MHz RISC-V coprocessor with 1.5 MB NVM and 256 KB RAM. It supports Bluetooth LE 6.0, Thread\u00ae, Matter, Zigbee\u00ae, 4 Mbps proprietary 2.4 GHz mode, NFC and enhanced security.</p> </li> <li> <p>On-board Interface MCU</p> <p>Integrate an nRF52820-based Interface MCU for onboard debugging and programming, eliminating the need for external tools. The Interface MCU also includes a USB-UART bridge for log, trace and terminal emulation, and an Interface Shell to access the board-specific functionality.</p> </li> <li> <p>Easy-to-use Form Factor</p> <p>Featuring USB-C, LEDs, Buttons, U.FL receptacles for U.FL cabled 2.4 GHz Antenna and 13.56 MHz NFC Antenna, Arm Serial Wire Debug (SWD) port and dual-row 40 pins with loose or pre-soldered headers available.</p> </li> <li> <p>Flexible Power Management</p> <p>Integrated TPS63901 buck-boost converter with 75-nA quiescent current and 1.8V/3.3V configurable power supply for I/Os, supporting various options for easily powering the unit from USB-C, external supplies or batteries.</p> </li> <li> <p>Built on Open Source</p> <p>nRF Connect SDK is supported, including the Zephyr RTOS. Developers can explore the full potential of the nRF54L15 using the extensive range of software samples, modules, and libraries available within the nRF Connect SDK.</p> </li> <li> <p>Well Documented</p> <p>An extensive set of documentation is available, including getting started and developer guides which can help you save big by reducing development effort. The documentation is hosted as a GitHub repository that allows managing the updates over time.</p> </li> </ul>"},{"location":"blog/nrf54l15-connect-kit-now-available/#getting-started-with-the-nrf54l15-connect-kit","title":"Getting Started with the nRF54L15 Connect Kit","text":"<p>We think the best way to learn is by doing. Our online documentation takes you through the basics of nRF Connect SDK development and show you how to implement typical use cases with Nordic Semiconductor libraries and drivers on the nRF54L15 Connect Kit.</p> <ul> <li> <p> Quick Start Guide</p> <p>Navigate you through the process of starting up your new nRF54L15 Connect Kit.</p> <p> Learn More</p> </li> <li> <p> Develop with nRF Connect SDK</p> <p>Set up the nRF Connect SDK development environment, build and run the tested applications and samples.</p> <p> Learn More</p> </li> <li> <p> Programming Guide</p> <p>Provide comprehensive instructions for programming the nRF54L15 and updating the Interface MCU Firmware.</p> <p> Learn More</p> </li> </ul> <p>Available now! \u2014 Get your nRF54L15 Connect Kit today and start developing the future of connected devices.</p>"},{"location":"contributing/","title":"Contributing","text":"<p>We're really glad you're reading this, because we would love to have more developers contribute to this project! If you're passionate about making this project better, you're in the right place.</p>"},{"location":"contributing/#before-contributing","title":"Before contributing","text":"<p>If you encounter a bug or think of a useful feature, please create a new issue. Creating an issue before jumping into code ensures we can discuss it and determine whether it aligns with the direction of this project.</p> <p>If you want to contribute to the project, regardless of whether it's a small bug fix or correcting a typo, please feel free to do so. Any help goes a long way! Also, contributions aren't necessarily all code related. Other contributions can be in the form of issues, pull requests, discussions, etc.</p>"},{"location":"contributing/#how-to-contribute","title":"How to contribute","text":"<ul> <li> <p> Something is not working?</p> <p>Report a bug by creating a new issue</p> <p> Report a bug</p> </li> <li> <p> Want to create a pull request?</p> <p>Learn how to create a pull request</p> <p> Create a pull request</p> </li> <li> <p> Have a question or need help?</p> <p>Ask a question on our discussion board and get in touch with our community</p> <p> Ask a question</p> </li> </ul>"},{"location":"contributing/creating-a-pull-request/","title":"Creating a pull request","text":"<p>You can contribute to this project by opening a pull request that will be reviewed by maintainers and integrated into the main repository when the changes made are approved. You can contribute bug fixes, changes to the documentation, or new functionality you have developed.</p> <p>You can follow these steps to create a pull request for this project:</p> <ol> <li> <p>Fork the repository, clone it and create a new branch:</p> <pre><code>git clone git@github.com:your-username/nrf54l15-connectkit.git\n</code></pre> <pre><code>cd nrf54l15-connectkit\n</code></pre> <pre><code>git checkout -b your-new-branch-name\n</code></pre> </li> <li> <p>Add your changes to the codebase.</p> </li> <li> <p>Commit your changes with your sign-off message:</p> <pre><code>git commit --signoff --message 'This is my commit message'\n</code></pre> <p>Tip</p> <p>A sign-off message in the following format is required on each commit in the pull request:</p> <pre><code>This is my commit message\n\nSigned-off-by: First_Name Last_Name &lt;My_Name@example.com&gt;\n</code></pre> <p>This will use your default git configuration which is found in <code>.git/config</code> and usually, it is the <code>username systemaddress</code> of the machine which you are using.</p> <p>To change this, you can use the following commands (Note these only change the current repo settings, you will need to add <code>--global</code> for these commands to change the installation default).</p> <p>Your name:</p> <pre><code>git config user.name \"First_Name Last_Name\"\n</code></pre> <p>Your email:</p> <pre><code>git config user.email \"My_Name@example.com\"\n</code></pre> </li> <li> <p>Push your commit to your forked repository:</p> <pre><code>git push origin your-new-branch-name\n</code></pre> </li> <li> <p>Create a pull request. See GitHub's official documentation for more details.</p> </li> </ol>"},{"location":"contributing/reporting-a-bug/","title":"Reporting a bug","text":"<p>Bugs are tracked as GitHub issues. Search open issues to see if someone else has reported a similar bug. If it's something new, open an issue. We'll use the issue to have a conversation about the problem you want to fix.</p> <p>When creating a new issue, please ensure the issue is clear and include additional details to help maintainers reproduce it:</p> <ul> <li>Use a clear and descriptive title for the issue to identify the problem.</li> <li>Describe the exact steps which reproduce the problem in as many details as possible.</li> <li>Provide specific examples to demonstrate the steps. Include links to files, or copy/pasteable snippets. If you're providing snippets in the issue, use Markdown code blocks.</li> <li>Describe the behavior you observed after following the steps and point out what exactly is the problem with that behavior.</li> <li>Explain which behavior you expected to see instead and why.</li> <li>Include screenshots and animated GIFs where possible.</li> </ul>"},{"location":"guides/ncs/","title":"nRF Connect SDK","text":""},{"location":"guides/ncs/#introduction","title":"Introduction","text":"<p>The nRF Connect SDK is a modern, unified software development kit for building low-power wireless applications based on the Nordic Semiconductor nRF52, nRF53, nRF54, nRF70, and nRF91 Series wireless devices. It supports Microsoft Windows, Linux, and macOS for development.</p>"},{"location":"guides/ncs/#distinguishing-features","title":"Distinguishing Features","text":"<ul> <li> <p>Based on Zephyr and open source</p> <p>The nRF Connect SDK integrates the Zephyr\u2122 real-time operating system (RTOS) and is compatible with most of Zephyr\u2019s applications and samples. Just like Zephyr, the nRF Connect SDK is open source and based on proven open-source projects.</p> </li> </ul> <ul> <li> <p>Middleware and security</p> <p>The nRF Connect SDK includes middleware from Zephyr, such as MQTT or Trusted Firmware-M for security. In addition to that, the nRF Connect SDK adds extra libraries and drivers, such as CoAP, LwM2M, a secure bootloader (MCUboot), Mbed TLS, nRF 802.15.4 Radio Driver, nRF Security, nRF Profiler, nRF Remote procedure call libraries, and many more.</p> </li> </ul> <ul> <li> <p>Pre-certified libraries</p> <p>The nRF Connect SDK provides pre-certified, optimized libraries, including for SoftDevice, Matter, and Thread.</p> </li> </ul> <ul> <li> <p>Robust connectivity support</p> <p>The nRF Connect SDK supports a wide range of connectivity technologies. In addition to connectivity technologies provided by Zephyr, such as Bluetooth\u00ae Low Energy, IPv6, TCP/IP, UDP, LoRa and LoRaWAN, the nRF Connect SDK supports ANT, Bluetooth Mesh, Apple Find My, LTE-M/NB-IoT/GPS, DECT NR+, Matter, Amazon Sidewalk, Thread, and Wi-Fi\u00ae, among others.</p> </li> </ul> <ul> <li> <p>Remote observability</p> <p>The nRF Connect SDK provides remote observability support to maintain optimal device performance and reliability in ever-changing device ecosystems after devices are deployed. Once devices are in the field, you can implement device reliability best practices such as remote debug, monitoring, and FOTA support.</p> </li> </ul> <ul> <li> <p>Scalable and extensible</p> <p>The nRF Connect SDK is out-of-tree ready and can be used for projects and applications of all sizes and levels of complexity.</p> </li> </ul> <ul> <li> <p>Third-party integrations</p> <p>The nRF Connect SDK provides integrations with third-party and Nordic products within the SDK, such as AWS, nRF Cloud, Memfault (Remote Observability) and more.</p> </li> </ul> <ul> <li> <p>Varied reference designs</p> <p>The nRF Connect SDK comes with advanced hardware reference designs for different use cases, ranging from nRF Desktop for Human Interface Devices to nRF5340 Audio for audio devices based on Bluetooth LE Audio specifications.</p> </li> </ul>"},{"location":"guides/ncs/#get-involved","title":"Get Involved","text":"<p>We think the best way to learn is by doing. The following sections take you through the basics of nRF Connect SDK development and show you how to implement typical use cases with Nordic Semiconductor libraries and drivers on the nRF54L15 Connect Kit.</p> <ul> <li> <p> Getting Started Guide</p> <p>Set up a command-line development environment, build and run your first sample application.</p> <p> Learn more</p> </li> <li> <p> Applications</p> <p>Show how to implement typical user scenarios and can be served as a starting point for developing your product.</p> <p> Learn more</p> </li> <li> <p> Samples</p> <p>Show how to implement typical use cases with Nordic Semiconductor libraries and drivers.</p> <p> Learn more</p> </li> </ul>"},{"location":"guides/ncs/#reference","title":"Reference","text":"<ul> <li> <p>nRF Connect SDK Primary Git Repository</p> </li> <li> <p>nRF Connect SDK Documentation</p> </li> <li> <p>Zephyr Project Primary Git Repository</p> </li> <li> <p>Zephyr Project Documentation</p> </li> </ul>"},{"location":"guides/ncs/getting-started/","title":"Getting Started Guide","text":"<p>This guide walks you through setting up the nRF Connect SDK development environment, building and running the Blinky sample on the nRF54L5 Connect Kit.</p> <p>The nRF Connect SDK is based on the Zephyr Project, which means everything required by Zephyr\u2019s Getting Started Guide is also suitable for the nRF Connect SDK.</p>"},{"location":"guides/ncs/getting-started/#select-and-update-os","title":"Select and Update OS","text":"<p>Install available updates for your operating system:</p> WindowsmacOSUbuntu <p>Select Start &gt; Settings &gt; Update &amp; Security &gt; Windows Update. Click Check for updates and install any that are available.</p> <p>On macOS Mojave or later, select System Preferences... &gt; Software Update. Click Update Now if necessary.</p> <p>On other versions, see this Apple support topic.</p> <p>This guide covers Ubuntu version 20.04 LTS and later.</p> <pre><code>sudo apt update\n</code></pre> <pre><code>sudo apt upgrade\n</code></pre>"},{"location":"guides/ncs/getting-started/#install-dependencies","title":"Install dependencies","text":"<p>Next, you\u2019ll install some host dependencies using your package manager.</p> <p>The current minimum required version for the main dependencies are:</p> Tool Min. Version CMake 3.20.5 Python 3.10 Devicetree compiler 1.4.6 WindowsmacOSUbuntu <p>In modern version of Windows (10 and later) it is recommended to install the Windows Terminal application from the Microsoft Store. Instructions are provided for a <code>cmd.exe</code> or PowerShell command prompts.</p> <p>These instructions rely on Windows' official package manager, winget. If using winget isn\u2019t an option, you can install dependencies from their respective websites and ensure the command line tools are on your <code>PATH</code> environment variable.</p> <ol> <li> <p>In modern Windows versions, <code>winget</code> is already pre-installed by default. You can verify that this is the case by typing <code>winget</code> in a terminal window. If that fails, you can then install winget.</p> </li> <li> <p>Open a Command Prompt (<code>cmd.exe</code>) or PowerShell terminal window. To do so, press the Windows key Win , type <code>cmd.exe</code> or PowerShell and click on the result.</p> </li> <li> <p>Use <code>winget</code> to install the required dependencies:</p> <pre><code>winget install Kitware.CMake Ninja-build.Ninja oss-winget.gperf python Git.Git oss-winget.dtc wget 7zip.7zip\n</code></pre> </li> <li> <p>Close the terminal window.</p> </li> </ol> <p>Note</p> <p>You may need to add the 7zip installation folder to your <code>PATH</code>.</p> <ol> <li> <p>Install Homebrew:</p> <pre><code>/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n</code></pre> </li> <li> <p>After the Homebrew installation script completes, follow the on-screen instructions to add the Homebrew installation to the path.</p> Apple SiliconIntel <pre><code>(echo; echo 'eval \"$(/opt/homebrew/bin/brew shellenv)\"') &gt;&gt; ~/.zprofile\n</code></pre> <pre><code>source ~/.zprofile\n</code></pre> <pre><code>(echo; echo 'eval \"$(/usr/local/bin/brew shellenv)\"') &gt;&gt; ~/.zprofile\n</code></pre> <pre><code>source ~/.zprofile\n</code></pre> </li> <li> <p>Use <code>brew</code> to install the required dependencies:</p> <pre><code>brew install cmake ninja gperf python3 python-tk ccache qemu dtc libmagic wget openocd\n</code></pre> </li> <li> <p>Add the Homebrew Python folder to the path, in order to be able to execute <code>python</code> and <code>pip</code> as well <code>python3</code> and <code>pip3</code>.</p> <pre><code>(echo; echo 'export PATH=\"'$(brew --prefix)'/opt/python/libexec/bin:$PATH\"') &gt;&gt; ~/.zprofile\n</code></pre> <pre><code>source ~/.zprofile\n</code></pre> </li> </ol> <p>Tip</p> <p>To check the versions of these dependencies installed, run the following command:</p> <pre><code>brew list --versions\n</code></pre> <ol> <li> <p>If using an Ubuntu version older than 22.04, it is necessary to add extra repositories to meet the minimum required versions for the main dependencies listed above. In that case, download, inspect and execute the Kitware archive script to add the Kitware APT repository to your sources list. A detailed explanation of <code>kitware-archive.sh</code> can be found here kitware third-party apt repository:</p> <pre><code>wget https://apt.kitware.com/kitware-archive.sh\n</code></pre> <pre><code>sudo bash kitware-archive.sh\n</code></pre> </li> <li> <p>Use <code>apt</code> to install the required dependencies:</p> <pre><code>sudo apt install --no-install-recommends git cmake ninja-build gperf \\\nccache dfu-util device-tree-compiler wget \\\npython3-dev python3-pip python3-setuptools python3-tk python3-wheel xz-utils file \\\nmake gcc gcc-multilib g++-multilib libsdl2-dev libmagic1\n</code></pre> <p>Note</p> <p>Due to the unavailability of <code>gcc-multilib</code> and <code>g++-multilib</code> on AArch64 (ARM64) systems, you may need to remove them from the list of packages to install.</p> </li> <li> <p>Verify the versions of the main dependencies installed on your system by entering:</p> <pre><code>cmake --version\n</code></pre> <pre><code>python3 --version\n</code></pre> <pre><code>dtc --version\n</code></pre> </li> </ol>"},{"location":"guides/ncs/getting-started/#get-the-code-and-install-python-dependencies","title":"Get the code and install Python dependencies","text":"<p>To help you quickly build and run the samples on the nRF54L15 Connect Kit, the primary nrf54l15-connectkit repository contains the nRF Connect SDK manifest repositories, additional hardware drivers and tested samples, etc.</p> <p>In the following instructions the name <code>NCS-Project</code> is used for the workspace, however in practice its name and location can be freely chosen. You\u2019ll also install additional Python dependencies in a Python virtual environment.</p> WindowsmacOSUbuntu <ol> <li> <p>Open a <code>cmd.exe</code> or PowerShell terminal window as a regular user</p> </li> <li> <p>Create a new virtual environment:</p> BatchfilePowerShell <pre><code>cd %HOMEPATH%\n</code></pre> <pre><code>python -m venv NCS-Project\\.venv\n</code></pre> <pre><code>cd $Env:HOMEPATH\n</code></pre> <pre><code>python -m venv NCS-Project\\.venv\n</code></pre> </li> <li> <p>Activate the virtual environment:</p> BatchfilePowerShell <pre><code>NCS-Project\\.venv\\Scripts\\activate.bat\n</code></pre> <pre><code>NCS-Project\\.venv\\Scripts\\Activate.ps1\n</code></pre> <p>Once activated your shell will be prefixed with <code>(.venv)</code>. The virtual environment can be deactivated at any time by running <code>deactivate</code>.</p> <p>Note</p> <p>Remember to activate the virtual environment every time you start working.</p> </li> <li> <p>Install <code>west</code>:</p> <pre><code>pip install west\n</code></pre> </li> <li> <p>Get the latest source code:</p> <pre><code>west init -m https://github.com/makerdiary/nrf54l15-connectkit --mr main NCS-Project\n</code></pre> <p>Tip</p> <p>You can initialize <code>west</code> with the revision of the project that you want to check out. For example, to check out the <code>v1.0.0</code> release, use the following command instead:</p> <pre><code>west init -m https://github.com/makerdiary/nrf54l15-connectkit --mr v1.0.0 NCS-Project\n</code></pre> </li> <li> <p>Enter the following commands to clone the project repositories:</p> <pre><code>cd NCS-Project\n</code></pre> <pre><code>west update\n</code></pre> <p>After all the repositories updated, your workspace folder now looks similar to this:</p> <pre><code>NCS-Project\n|___ .venv\n|___ .west\n|___ bootloader\n|___ modules\n|___ nrf\n|___ nrf54l15-connectkit\n|___ nrfxlib\n|___ test\n|___ tools\n|___ zephyr\n|___ ...\n</code></pre> </li> <li> <p>Export a Zephyr CMake package. This allows CMake to automatically load boilerplate code required for building Zephyr applications.</p> <pre><code>west zephyr-export\n</code></pre> </li> <li> <p>The Zephyr west extension command <code>west packages</code> can be used to install Python dependencies.</p> <pre><code>west packages pip --install\n</code></pre> </li> </ol> <ol> <li> <p>Create a new virtual environment:</p> <pre><code>python3 -m venv ~/NCS-Project/.venv\n</code></pre> </li> <li> <p>Activate the virtual environment:</p> <pre><code>source ~/NCS-Project/.venv/bin/activate\n</code></pre> <p>Once activated your shell will be prefixed with <code>(.venv)</code>. The virtual environment can be deactivated at any time by running <code>deactivate</code>.</p> <p>Note</p> <p>Remember to activate the virtual environment every time you start working.</p> </li> <li> <p>Install <code>west</code>:</p> <pre><code>pip install west\n</code></pre> </li> <li> <p>Get the latest source code:</p> <pre><code>west init -m https://github.com/makerdiary/nrf54l15-connectkit --mr main NCS-Project\n</code></pre> <p>Tip</p> <p>You can initialize <code>west</code> with the revision of the project that you want to check out. For example, to check out the <code>v1.0.0</code> release, use the following command instead:</p> <pre><code>west init -m https://github.com/makerdiary/nrf54l15-connectkit --mr v1.0.0 NCS-Project\n</code></pre> </li> <li> <p>Enter the following commands to clone the project repositories:</p> <pre><code>cd NCS-Project\n</code></pre> <pre><code>west update\n</code></pre> <p>After all the repositories updated, your workspace folder now looks similar to this:</p> <pre><code>NCS-Project\n|___ .venv\n|___ .west\n|___ bootloader\n|___ modules\n|___ nrf\n|___ nrf54l15-connectkit\n|___ nrfxlib\n|___ test\n|___ tools\n|___ zephyr\n|___ ...\n</code></pre> </li> <li> <p>Export a Zephyr CMake package. This allows CMake to automatically load boilerplate code required for building Zephyr applications.</p> <pre><code>west zephyr-export\n</code></pre> </li> <li> <p>The Zephyr west extension command <code>west packages</code> can be used to install Python dependencies.</p> <pre><code>west packages pip --install\n</code></pre> </li> </ol> <ol> <li> <p>Use <code>apt</code> to install Python <code>venv</code> package:</p> <pre><code>sudo apt install python3-venv\n</code></pre> </li> <li> <p>Create a new virtual environment:</p> <pre><code>python3 -m venv ~/NCS-Project/.venv\n</code></pre> </li> <li> <p>Activate the virtual environment:</p> <pre><code>source ~/NCS-Project/.venv/bin/activate\n</code></pre> <p>Once activated your shell will be prefixed with <code>(.venv)</code>. The virtual environment can be deactivated at any time by running <code>deactivate</code>.</p> <p>Note</p> <p>Remember to activate the virtual environment every time you start working.</p> </li> <li> <p>Install <code>west</code>:</p> <pre><code>pip install west\n</code></pre> </li> <li> <p>Get the latest source code:</p> <pre><code>west init -m https://github.com/makerdiary/nrf54l15-connectkit --mr main NCS-Project\n</code></pre> <p>Tip</p> <p>You can initialize <code>west</code> with the revision of the project that you want to check out. For example, to check out the <code>v1.0.0</code> release, use the following command instead:</p> <pre><code>west init -m https://github.com/makerdiary/nrf54l15-connectkit --mr v1.0.0 NCS-Project\n</code></pre> </li> <li> <p>Enter the following commands to clone the project repositories:</p> <pre><code>cd NCS-Project\n</code></pre> <pre><code>west update\n</code></pre> <p>After all the repositories updated, your workspace folder now looks similar to this:</p> <pre><code>NCS-Project\n|___ .venv\n|___ .west\n|___ bootloader\n|___ modules\n|___ nrf\n|___ nrf54l15-connectkit\n|___ nrfxlib\n|___ test\n|___ tools\n|___ zephyr\n|___ ...\n</code></pre> </li> <li> <p>Export a Zephyr CMake package. This allows CMake to automatically load boilerplate code required for building Zephyr applications.</p> <pre><code>west zephyr-export\n</code></pre> </li> <li> <p>The Zephyr west extension command <code>west packages</code> can be used to install Python dependencies.</p> <pre><code>west packages pip --install\n</code></pre> <p>Note</p> <p>On Linux, permission to access USB devices from user space must be explicitly granted via udev rules. See udev rules on Linux for detailed instructions. </p> </li> </ol>"},{"location":"guides/ncs/getting-started/#install-the-zephyr-sdk","title":"Install the Zephyr SDK","text":"<p>The Zephyr Software Development Kit (SDK) contains toolchains for each of Zephyr\u2019s supported architectures, which include a compiler, assembler, linker and other programs required to build Zephyr applications.</p> <p>For Linux, it also contains additional host tools, such as custom QEMU and OpenOCD builds that are used to emulate, flash and debug Zephyr applications.</p> WindowsmacOSUbuntu <p>Install the Zephyr SDK using the <code>west sdk install</code>.</p> BatchfilePowerShell <pre><code>cd %HOMEPATH%\\NCS-Project\\zephyr\n</code></pre> <pre><code>west sdk install -t arm-zephyr-eabi\n</code></pre> <pre><code>cd $Env:HOMEPATH\\NCS-Project\\zephyr\n</code></pre> <pre><code>west sdk install -t arm-zephyr-eabi\n</code></pre> <p>Install the Zephyr SDK using the <code>west sdk install</code>.</p> <pre><code>cd ~/NCS-Project/zephyr\n</code></pre> <pre><code>west sdk install -t arm-zephyr-eabi\n</code></pre> <p>Install the Zephyr SDK using the <code>west sdk install</code>.</p> <pre><code>cd ~/NCS-Project/zephyr\n</code></pre> <pre><code>west sdk install -t arm-zephyr-eabi\n</code></pre> <p>Tip</p> <p>Using the command options, you can specify the SDK installation destination and which architecture of toolchains to install. See <code>west sdk install --help</code> for details.</p>"},{"location":"guides/ncs/getting-started/#build-the-blinky-sample","title":"Build the Blinky sample","text":"<p>Now, you can build the Blinky sample with <code>west build</code>, specifying the board (following the <code>-b</code> option) as <code>nrf54l15_connectkit/nrf54l15/cpuapp</code>.</p> WindowsmacOSUbuntu BatchfilePowerShell <pre><code>cd %HOMEPATH%\\NCS-Project\\nrf54l15-connectkit\n</code></pre> <pre><code>west build -p always -b nrf54l15_connectkit/nrf54l15/cpuapp samples\\blinky\n</code></pre> <pre><code>cd $Env:HOMEPATH\\NCS-Project\\nrf54l15-connectkit\n</code></pre> <pre><code>west build -p always -b nrf54l15_connectkit/nrf54l15/cpuapp samples\\blinky\n</code></pre> <pre><code>cd ~/NCS-Project/nrf54l15-connectkit\n</code></pre> <pre><code>west build -p always -b nrf54l15_connectkit/nrf54l15/cpuapp samples/blinky\n</code></pre> <pre><code>cd ~/NCS-Project/nrf54l15-connectkit\n</code></pre> <pre><code>west build -p always -b nrf54l15_connectkit/nrf54l15/cpuapp samples/blinky\n</code></pre> <p>Tip</p> <p>The <code>-p</code> always option forces a pristine build, and is recommended for new users. Users may also use the <code>-p auto</code> option, which will use heuristics to determine if a pristine build is required, such as when building another sample.</p>"},{"location":"guides/ncs/getting-started/#flash-and-run-the-sample","title":"Flash and run the sample","text":"<p>Connect the nRF54L15 Connect Kit to the computer with a USB-C cable:</p> <p></p> <p>Then flash the sample using <code>west flash</code>:</p> <pre><code>west flash\n</code></pre> <p>After flashing the firmware to your board, the Green LED starts to blink.</p> <p></p> <p>Open up a serial terminal, specifying the primary COM port that your computer uses to communicate with the nRF54L15:</p> WindowsmacOSUbuntu <ol> <li>Start PuTTY.</li> <li> <p>Configure the correct serial port and click Open:</p> <p></p> </li> </ol> <p>Open up a terminal and run:</p> <pre><code>screen &lt;serial-port-name&gt; 115200\n</code></pre> <p>Open up a terminal and run:</p> <pre><code>screen &lt;serial-port-name&gt; 115200\n</code></pre> <p>Observe the output of the terminal. You should see the output, similar to what is shown in the following:</p> Terminal<pre><code>*** Booting nRF Connect SDK v3.1.0-rc1-8505887182fe ***\n*** Using Zephyr OS v4.1.99-797a60e8542a ***\nLED state: OFF\nLED state: ON\nLED state: OFF\nLED state: ON\nLED state: OFF\n...\n</code></pre>"},{"location":"guides/ncs/getting-started/#next-steps","title":"Next steps","text":"<p>Explore more applications or samples running on the nRF54L15 Connect Kit:</p> <ul> <li> <p> Applications</p> <p>Show how to implement typical user scenarios and can be served as a starting point for developing your product.</p> <p> Learn more</p> </li> <li> <p> Samples</p> <p>Show how to implement typical use cases with Nordic Semiconductor libraries and drivers.</p> <p> Learn more</p> </li> <li> <p> nRF Connect SDK Documentation</p> <p>Official latest documentation for the nRF Connect SDK maintained by Nordic Semiconductor.</p> <p> Learn more</p> </li> <li> <p> Zephyr Project Documentation</p> <p>Learn everything about the Zephyr Project, including architecture, features and application development, etc.</p> <p> Learn more</p> </li> </ul>"},{"location":"guides/ncs/applications/","title":"Applications","text":"<p>A set of example applications are provided to show how to implement typical user scenarios using the nRF54L15 Connect Kit. Applications typically include a fully integrated software stack and can serve as a starting point for developing your product. They use interface drivers and libraries from the nRF Connect SDK and its set of repositories to implement a specific use case, while Samples showcase a single feature or library.</p> <ul> <li>Quick Start Demo</li> <li>Interface MCU Firmware</li> </ul>"},{"location":"guides/ncs/applications/ifmcu/","title":"Interface MCU Firmware","text":""},{"location":"guides/ncs/applications/ifmcu/#overview","title":"Overview","text":"<p>This guide walks you through building and running the Interface MCU Firmware which enables a CMSIS-DAP interface for debug and programming, a USB-UART bridge for terminal emulation and an Interface Shell for accessing board-specific functionality.</p>"},{"location":"guides/ncs/applications/ifmcu/#how-it-works","title":"How it works","text":"<p>The nRF54L15 Connect Kit comes with an nRF52820-based Interface MCU. The Interface MCU Firmware is running on the nRF52820. It implements a CMSIS-DAP interface for debugging and programming the nRF54L15. It also exposes two USB CDC ACM devices, one acts as a UART bridge between the host and the nRF54L15, the other enables an Interface Shell for accessing board-specific functionality.</p> <p>The Interface MCU also comes pre-programmed with the UF2 Bootloader, an easy-to-use and self-upgradable bootloader that can be used to update the firmware by just copying the .uf2-format images to the flash drive without using an external programmer.</p> <p>The following figure describes the functional architecture of the Interface MCU:</p> <p></p> <p></p>"},{"location":"guides/ncs/applications/ifmcu/#requirements","title":"Requirements","text":"<p>Before you start, check that you have the required hardware and software:</p> <ul> <li>1x nRF54L15 Connect Kit</li> <li>1x USB-C Cable</li> <li>A computer running macOS, Ubuntu, or Windows 10 or newer</li> </ul>"},{"location":"guides/ncs/applications/ifmcu/#building-the-application","title":"Building the application","text":"<p>To build the application, follow the instructions in Getting Started Guide to set up your preferred building environment.</p> <p>Use the following steps to build the Interface MCU Firmware on the command line.</p> <ol> <li> <p>Open a terminal window.</p> </li> <li> <p>Go to <code>NCS-Project/nrf54l15-connectkit</code> repository cloned in the Getting Started Guide.</p> </li> <li> <p>Build the application using the <code>west build</code> command, specifying the board (following the <code>-b</code> option) as <code>nrf54l15_connectkit/nrf52820</code>.</p> <pre><code>west build -p always -b nrf54l15_connectkit/nrf52820 applications/ifmcu_firmware\n</code></pre> <p>Tip</p> <p>The <code>-p</code> always option forces a pristine build, and is recommended for new users. Users may also use the <code>-p auto</code> option, which will use heuristics to determine if a pristine build is required, such as when building another application.</p> </li> <li> <p>After building the application successfully, the firmware with the name <code>zephyr.uf2</code> can be found in the <code>build/ifmcu_firmware/zephyr</code> directory.</p> </li> </ol>"},{"location":"guides/ncs/applications/ifmcu/#flashing-the-firmware","title":"Flashing the firmware","text":"<p>The application is compatible with the UF2 Bootloader, so that you can easily flash the firmware by just copying the <code>zephyr.uf2</code> file to the flash drive without using an external programmer. </p> <p>To flash the firmware, complete the following steps:</p> <ol> <li> <p>Push and hold the DFU/RST button and connect your board to the USB port of your computer. Release the DFU/RST button after your board is connected.</p> </li> <li> <p>It will mount as a Mass Storage Device called UF2BOOT. The RGB LED is breathing in green.</p> </li> <li> <p>Drag and drop <code>zephyr.uf2</code> onto the UF2BOOT volume. The RGB LED blinks green rapidly during programming.</p> </li> <li> <p>The application starts running after the firmware programming is completed.</p> </li> </ol> <p>Note</p> <p>You may experience the following errors when copying the firmware to the UF2BOOT drive on macOS 14.5 or newer:</p> <p></p> Terminal<pre><code>$ cp build/ifmcu_firmware/zephyr/zephyr.uf2 /Volumes/UF2BOOT\ncp: /Volumes/UF2BOOT/zephyr.uf2: fcopyfile failed: Input/output error\ncp: /Volumes/UF2BOOT/zephyr.uf2: fchmod failed: No such file or directory\n</code></pre> <p>Currently you can ignore these errors as the firmware programming is completed and the application should work as expected.</p>"},{"location":"guides/ncs/applications/ifmcu/#usage","title":"Usage","text":""},{"location":"guides/ncs/applications/ifmcu/#using-the-cmsis-dap-interface","title":"Using the CMSIS-DAP Interface","text":"<p>You can use the CMSIS-DAP Interface to debug or program the nRF54L15.</p> <p>Before you start, a tool that supports the CMSIS-DAP protocol should be installed. pyOCD v0.38.0 or newer is required. pyOCD will be installed after setting up your development environment in Getting Started Guide.</p> <p>Note</p> <p>On Linux, permission to access USB devices from user space must be explicitly granted via udev rules. See udev rules on Linux for detailed instructions. </p> <p>The following sections show the typical use cases with pyOCD:</p> <ul> <li> <p>To show the connected devices, use <code>pyocd list</code>:</p> Terminal<pre><code>#   Probe/Board              Unique ID               Target\n-----------------------------------------------------------------\n0   ZEPHYR IFMCU CMSIS-DAP   820D9A5F0E322B8EFE662   \u2714\ufe0e nrf54l\n    Makerdiary               nRF54L15 Connect Kit\n</code></pre> </li> <li> <p>To program the nRF54L15 application firmware, use <code>pyocd load</code>:</p> <pre><code>pyocd load -t nrf54l &lt;firmware.hex&gt; # (1)!\n</code></pre> <ol> <li>You can also use <code>pyocd flash</code> instead:     <pre><code>pyocd flash -t nrf54l &lt;firmware.hex&gt;\n</code></pre></li> </ol> </li> <li> <p>To erase the entire non-volatile memory (RRAM) of the nRF54L15, run the following command:</p> <pre><code>pyocd erase -t nrf54l --chip\n</code></pre> </li> </ul> <p>To learn more about pyOCD, see the pyOCD Documentation.</p>"},{"location":"guides/ncs/applications/ifmcu/#using-the-usb-uart-bridge","title":"Using the USB-UART Bridge","text":"<p>The primary USB CDC ACM device that the Interface MCU exposes acts as a UART bridge between the host and the nRF54L15. </p> <p>To see the UART output, connect to the board with a terminal emulator, specifying the correct serial port that your computer uses to communicate with the nRF54L15:</p> WindowsmacOSUbuntu <ol> <li>Start PuTTY.</li> <li> <p>Configure the correct serial port and click Open:</p> <p></p> </li> </ol> <p>Open up a terminal and run:</p> <pre><code>screen &lt;serial-port-name&gt; 115200\n</code></pre> <p>Open up a terminal and run:</p> <pre><code>screen &lt;serial-port-name&gt; 115200\n</code></pre> <p>Tip</p> <p>The default serial port settings are the following:</p> Baud rate Data bits Stop bits Parity Flow Control 115200 8 1 None None"},{"location":"guides/ncs/applications/ifmcu/#using-the-interface-shell","title":"Using the Interface Shell","text":"<p>The secondary USB CDC ACM device that the Interface MCU exposes enables an Interface Shell for accessing the board-specific functionality.</p> <p>To interact with the Interface Shell, connect to the board with a terminal emulator, specifying the correct serial port that your computer uses to communicate with the shell:</p> WindowsmacOSUbuntu <ol> <li>Start PuTTY.</li> <li> <p>Configure the correct serial port and click Open:</p> <p></p> </li> </ol> <p>Open up a terminal and run:</p> <pre><code>screen &lt;serial-port-name&gt; 115200\n</code></pre> <p>Open up a terminal and run:</p> <pre><code>screen &lt;serial-port-name&gt; 115200\n</code></pre> <p>Tip</p> <p>The default serial port settings are the following:</p> Baud rate Data bits Stop bits Parity Flow Control 115200 8 1 None None <p>Type Tab to list all supported commands. When you type a command with <code>--help</code>, the terminal shows its usage, for example <code>i2c --help</code>. For more information about the commands, see the Interface Shell Command Reference.</p> Terminal<pre><code>ifsh:~$\n  bootloader  cfgsync     clear       device      gpio        help\n  history     i2c         kernel      rem         reset       resize\n  retval      settings    shell       temp        version     viosel\nifsh:~$ i2c --help\ni2c - I2C commands\nSubcommands:\n  scan  : Scan I2C devices\n                 Usage: scan &lt;device&gt;\n  recover  : Recover I2C bus\n                 Usage: recover &lt;device&gt;\n  read  : Read bytes from an I2C device\n                 Usage: read &lt;device&gt; &lt;addr&gt; &lt;reg&gt; [&lt;bytes&gt;]\n  read_byte  : Read a byte from an I2C device\n                 Usage: read_byte &lt;device&gt; &lt;addr&gt; &lt;reg&gt;\n  direct_read  : Read byte stream directly from an I2C device without writing a\n                 register address first\n                 Usage: direct_read &lt;device&gt; &lt;addr&gt; [&lt;bytes&gt;]\n  write  : Write bytes to an I2C device\n                 Usage: write &lt;device&gt; &lt;addr&gt; &lt;reg&gt; [&lt;byte1&gt;, ...]\n  write_byte  : Write a byte to an I2C device\n                 Usage: write_byte &lt;device&gt; &lt;addr&gt; &lt;reg&gt; &lt;value&gt;\n  speed  : Configure I2C bus speed\n                 Usage: speed &lt;device&gt; &lt;speed&gt;\nifsh:~$\n</code></pre>"},{"location":"guides/ncs/applications/ifmcu/#interface-shell-command-reference","title":"Interface Shell Command Reference","text":"<p>The following table describes all supported commands of the Interface Shell:</p> Command Description <code>bootloader</code> Enter Interface MCU UF2 Bootloader. <code>cfgsync</code> Store settings to the non-volatile memory. Only <code>viosel</code> commands can affect the settings. <code>clear</code> Clear shell screen. <code>device list</code> List all configured devices in the devicetree. <code>gpio conf &lt;device&gt; &lt;pin&gt; &lt;configuration &lt;i|o&gt;[u|d][h|l][0|1]&gt; [vendor specific]</code> Configure GPIO pin. <code>gpio get &lt;device&gt; &lt;pin&gt;</code> Get GPIO pin value. <code>gpio set &lt;device&gt; &lt;pin&gt; &lt;level 0|1&gt;</code> Set GPIO pin value. <code>gpio toggle &lt;device&gt; &lt;pin&gt;</code> Toggle GPIO pin. <code>gpio devices</code> List all GPIO devices. <code>gpio blink &lt;device&gt; &lt;pin&gt;</code> Blink GPIO pin. <code>gpio info [device]</code> GPIO Information. <code>help</code> Show help information. <code>history</code> Show command history. <code>i2c scan &lt;device&gt;</code> Scan I2C devices.  Use <code>device list</code> to get the I2C bus name <code>&lt;device&gt;</code>. <code>i2c recover &lt;device&gt;</code> Recovery I2C bus.  Use <code>device list</code> to get the I2C bus name <code>&lt;device&gt;</code>. <code>i2c read &lt;device&gt; &lt;addr&gt; &lt;reg&gt; [&lt;bytes&gt;]</code> Read bytes from an I2C device.  Use <code>device list</code> to get the I2C bus name <code>&lt;device&gt;</code>. <code>i2c read_byte &lt;device&gt; &lt;addr&gt; &lt;reg&gt;</code> Read a byte from an I2C device.  Use <code>device list</code> to get the I2C bus name <code>&lt;device&gt;</code>. <code>i2c direct_read &lt;device&gt; &lt;addr&gt; [&lt;bytes&gt;]</code> Read byte stream directly from an I2C device without writing a register address first.  Use <code>device list</code> to get the I2C bus name <code>&lt;device&gt;</code>. <code>i2c write &lt;device&gt; &lt;addr&gt; &lt;reg&gt; [&lt;byte1&gt;, ...]</code> Write bytes to an I2C device.  Use <code>device list</code> to get the I2C bus name <code>&lt;device&gt;</code>. <code>i2c write_byte &lt;device&gt; &lt;addr&gt; &lt;reg&gt; &lt;value&gt;</code> Write a byte to an I2C device.  Use <code>device list</code> to get the I2C bus name <code>&lt;device&gt;</code>. <code>i2c speed &lt;device&gt; &lt;speed&gt;</code> Configure I2C bus speed.  Use <code>device list</code> to get the I2C bus name <code>&lt;device&gt;</code>. <code>kernel cycles</code> Get Kernel cycles. <code>kernel reboot</code> Reboot kernel. <code>kernel sleep &lt;ms&gt;</code> Kernel sleeps for  millisecond. <code>kernel thread list</code> List kernel threads. <code>kernel thread stacks</code> List threads stack usage. <code>rem</code> Ignore lines beginning with 'rem '. <code>reset [nrf54l15]</code> Reset nRF54L15. <code>reset nrf52820</code> Reset nRF52820. <code>resize</code> Console gets terminal screen size or assumes <code>default</code> in case the readout fails. It must be executed after each terminal width change to ensure correct text display. <code>resize default</code> Assume 80 chars screen width and send this setting to the terminal. <code>retval</code> Print return value of most recent command. <code>settings list [subtree]</code> List all settings in a subtree (omit to list all). <code>settings read [type] &lt;name&gt;</code> Read a specific setting.  <code>type</code>: <code>string</code> or <code>hex</code> (default: <code>hex</code>) <code>settings write [type] &lt;name&gt; &lt;value&gt;</code> Write to a specific setting.  <code>type</code>: <code>string</code> or <code>hex</code> (default: <code>hex</code>) <code>settings delete &lt;name&gt;</code> Delete a specific setting. <code>shell backends</code> List active shell backends. <code>shell backspace_mode</code> Toggle backspace key mode. Some terminals are not sending separate escape code for backspace and delete key. This command forces shell to interpret delete key as backspace. <code>shell colors</code> Toggle colored syntax. <code>shell vt100</code> Toggle vt100 commands. <code>shell prompt</code> Toggle prompt. <code>shell echo</code> Toggle shell echo. <code>shell stats reset</code> Reset shell statistics for the Logger module. <code>shell stats show</code> Get shell statistics for the Logger module. <code>temp</code> Get the die temperature of the nRF52820. <code>version [-a|--all]</code> Show Interface MCU version.  Use <code>-a</code> or <code>--all</code> option to show more details. <code>viosel [0|1]</code> Get or set VIO voltage  <code>0</code> (default): 3.3V  <code>1</code>: 1.8V"},{"location":"guides/ncs/applications/quick_start_demo/","title":"Quick Start Demo","text":""},{"location":"guides/ncs/applications/quick_start_demo/#overview","title":"Overview","text":"<p>The Quick Start Demo application enables you to test various features of the nRF54L15 Connect Kit such as Zephyr Shell, LED, Button, NFC tag, and Bluetooth Low Energy connectivity.</p> <p>Tip</p> <p>The nRF54L15 Connect Kit comes pre-programmed with the Quick Start Demo application, enabling you to explore its various features right out of the box.</p>"},{"location":"guides/ncs/applications/quick_start_demo/#requirements","title":"Requirements","text":"<p>Before you start, check that you have the required hardware and software:</p> <ul> <li>1x nRF54L15 Connect Kit</li> <li>1x U.FL cabled 2.4 GHz Antenna (included in the box)</li> <li>1x U.FL cabled 13.56 MHz NFC Antenna (included in the box)</li> <li>1x USB-C Cable</li> <li>A smartphone or a tablet with NFC support</li> <li>A computer running macOS, Ubuntu, or Windows 10 or newer</li> </ul>"},{"location":"guides/ncs/applications/quick_start_demo/#installing-nrf-blinky-app","title":"Installing nRF Blinky App","text":"<p>nRF Blinky is a simple mobile app for developers new to Bluetooth Low Energy. It can:</p> <p> Scan and connect to a peripheral device advertising with the proprietary/vendor-specific LED Button Service (LBS) UUID</p> <p> Write to the LED Characteristic to change the state of an LED</p> <p> Be notified when the Button Characteristic changes state because of a button press</p> <p> </p>"},{"location":"guides/ncs/applications/quick_start_demo/#setting-up-your-board","title":"Setting up your board","text":"<p> Attach the U.FL cabled 2.4 GHz Antenna.</p> <p> Attach the U.FL cabled 13.56 MHz NFC Antenna.</p> <p> Connect the nRF54L15 Connect Kit to the computer with a USB-C cable.</p> <p></p>"},{"location":"guides/ncs/applications/quick_start_demo/#building-the-application","title":"Building the application","text":"<p>To build the application, follow the instructions in Getting Started Guide to set up your preferred building environment.</p> <p>Use the following steps to build the Quick Start Demo application on the command line.</p> <ol> <li> <p>Open a terminal window.</p> </li> <li> <p>Go to <code>NCS-Project/nrf54l15-connectkit</code> repository cloned in the Getting Started Guide.</p> </li> <li> <p>Build the application using the <code>west build</code> command, specifying the board (following the <code>-b</code> option) as <code>nrf54l15_connectkit/nrf54l15/cpuapp</code>.</p> <pre><code>west build -p always -b nrf54l15_connectkit/nrf54l15/cpuapp applications/quick_start_demo\n</code></pre> <p>Tip</p> <p>The <code>-p</code> always option forces a pristine build, and is recommended for new users. Users may also use the <code>-p auto</code> option, which will use heuristics to determine if a pristine build is required, such as when building another application.</p> </li> <li> <p>After building the application successfully, the firmware with the name <code>merged.hex</code> can be found in the <code>build</code> directory.</p> </li> </ol>"},{"location":"guides/ncs/applications/quick_start_demo/#flashing-the-firmware","title":"Flashing the firmware","text":"<p>Flash the application firmware using <code>west flash</code>:</p> <pre><code>west flash\n</code></pre> <p>Tip</p> <p>In case you wonder, the <code>west flash</code> will execute the following command:</p> <pre><code>pyocd load --target nrf54l --frequency 4000000 build/merged.hex\n</code></pre>"},{"location":"guides/ncs/applications/quick_start_demo/#testing","title":"Testing","text":"<p>After programming the application, test it by performing the following steps:</p>"},{"location":"guides/ncs/applications/quick_start_demo/#connecting-to-zephyr-shell","title":"Connecting to Zephyr Shell","text":"<p>Once the board is connected, it exposes two COM ports, the primary COM port is connected to the Zephyr Shell whose terminal prompt appears as <code>uart:~$</code>.</p> <p>Open up a serial terminal, specifying the Zephyr Shell COM port:</p> WindowsmacOSUbuntu <ol> <li>Start PuTTY.</li> <li> <p>Configure the correct serial port and click Open:</p> <p></p> </li> </ol> <p>Open up a terminal and run:</p> <pre><code>screen &lt;serial-port-name&gt; 115200\n</code></pre> <p>Open up a terminal and run:</p> <pre><code>screen &lt;serial-port-name&gt; 115200\n</code></pre> <p>Press the DFU/RST button to reset the nRF54L15. Observe the output of the terminal. You should see the output, similar to what is shown in the following:</p> Terminal<pre><code>*** Booting Quick Start Demo v3.1.0-5da6f6aae060 ***\n*** Using nRF Connect SDK v3.1.0-6c6e5b32496e ***\n*** Using Zephyr OS v4.1.99-1612683d4010 ***\n[00:00:00.001,155] &lt;inf&gt; main: NFC configuration done\n[00:00:00.001,802] &lt;inf&gt; fs_zms: 2 Sectors of 4096 bytes\n[00:00:00.001,812] &lt;inf&gt; fs_zms: alloc wra: 0, c60\n[00:00:00.001,819] &lt;inf&gt; fs_zms: data wra: 0, 190\n[00:00:00.002,139] &lt;inf&gt; bt_sdc_hci_driver: SoftDevice Controller build revision:\n                                            fc de 41 eb a2 d1 42 24  00 b5 f8 57 9f ac 9d 9e |..A...B$ ...W....\n                                            aa c9 b4 34                                      |...4\n[00:00:00.003,843] &lt;inf&gt; bt_hci_core: HW Platform: Nordic Semiconductor (0x0002)\n[00:00:00.003,858] &lt;inf&gt; bt_hci_core: HW Variant: nRF54Lx (0x0005)\n[00:00:00.003,871] &lt;inf&gt; bt_hci_core: Firmware: Standard Bluetooth controller (0x00) Version 252.16862 Build 1121034987\n[00:00:00.004,026] &lt;inf&gt; bt_hci_core: No ID address. App must call settings_load()\n[00:00:00.004,033] &lt;inf&gt; main: Bluetooth initialized\n[00:00:00.004,528] &lt;inf&gt; bt_hci_core: HCI transport: SDC\n[00:00:00.004,578] &lt;inf&gt; bt_hci_core: Identity: EF:11:48:A5:EA:6D (random)\n[00:00:00.004,595] &lt;inf&gt; bt_hci_core: HCI: version 6.1 (0x0f) revision 0x3069, manufacturer 0x0059\n[00:00:00.004,610] &lt;inf&gt; bt_hci_core: LMP: version 6.1 (0x0f) subver 0x3069\n[00:00:00.006,087] &lt;inf&gt; main: Advertising successfully started\nuart:~$\n</code></pre> <p>Type Tab to list all supported commands. When you type a command with <code>--help</code>, the terminal shows its usage, for example <code>gpio --help</code>:</p> Terminal<pre><code>uart:~$\n  adc      bt       clear    date     device   devmem   gatt     gpio\n  help     history  kernel   log      rem      resize   retval   shell\n  stats\nuart:~$ gpio --help\ngpio - GPIO commands\nSubcommands:\n  conf     : Configure GPIO pin\n             Usage: gpio conf &lt;device&gt; &lt;pin&gt; &lt;configuration\n             &lt;i|o&gt;[u|d][h|l][0|1]&gt; [vendor specific]\n             &lt;i|o&gt; - input|output\n             [u|d] - pull up|pull down, otherwise open\n             [h|l] - active high|active low, otherwise defaults to active high\n             [0|1] - initialise to logic 0|logic 1, otherwise defaults to logic\n             0\n             [vendor specific] - configuration flags within the mask 0xFF00\n             see include/zephyr/dt-bindings/gpio/\n  get      : Get GPIO pin value\n             Usage: gpio get &lt;device&gt; &lt;pin&gt;\n  set      : Set GPIO pin value\n             Usage: gpio set &lt;device&gt; &lt;pin&gt; &lt;level 0|1&gt;\n  toggle   : Toggle GPIO pin\n             Usage: gpio toggle &lt;device&gt; &lt;pin&gt;\n  devices  : List all GPIO devices\n             Usage: gpio devices\n  blink    : Blink GPIO pin\n             Usage: gpio blink &lt;device&gt; &lt;pin&gt;\n  info     : GPIO Information\n             Usage: gpio info [device]\n</code></pre>"},{"location":"guides/ncs/applications/quick_start_demo/#led-blinking-test","title":"LED Blinking Test","text":"<p>Now you can blink the Green LED using GPIO commands in the Zephyr Shell.</p> <ol> <li> <p>To control the Green LED, configure the GPIO pin P0.2 as an output:</p> <pre><code>gpio conf gpio0 2 o\n</code></pre> </li> <li> <p>Blink the Green LED using the <code>gpio blink</code> command:</p> <pre><code>gpio blink gpio0 2\n</code></pre> </li> <li> <p>The Green LED starts to blink. Observe the output of the terminal. You should see the output, similar to what is shown in the following:</p> Terminal<pre><code>uart:~$ gpio conf gpio0 2 o\nuart:~$ gpio blink gpio0 2\nHit any key to exit\n</code></pre> </li> <li> <p>Hit any key in the Shell to stop the LED blinking.</p> </li> </ol>"},{"location":"guides/ncs/applications/quick_start_demo/#button-input-test","title":"Button Input Test","text":"<p>When the application starts, it prints any input event using the Input APIs. Press the USR button and observe the output of the terminal. You should see the output, similar to what is shown in the following:</p> Terminal<pre><code>[00:20:46.758,664] &lt;inf&gt; input: input event: dev=buttons SYN type= 1 code= 11 value=1\n[00:20:47.441,742] &lt;inf&gt; input: input event: dev=buttons SYN type= 1 code= 11 value=0\n[00:36:18.853,192] &lt;inf&gt; input: input event: dev=buttons SYN type= 1 code= 11 value=1\n[00:36:19.004,974] &lt;inf&gt; input: input event: dev=buttons SYN type= 1 code= 11 value=0\nuart:~$ \n</code></pre>"},{"location":"guides/ncs/applications/quick_start_demo/#nfc-tag-test","title":"NFC Tag Test","text":"<p>When the application starts, it initializes the NFC tag and generates a URI message with a URI record containing the URL \"https://makerdiary.com\". Test it by performing the following steps:</p> <ol> <li> <p>Touch the NFC antenna with the smartphone or tablet.</p> </li> <li> <p>Observe that the smartphone or tablet tries to open the URL \"https://makerdiary.com\" in a web browser.</p> </li> </ol> <p></p>"},{"location":"guides/ncs/applications/quick_start_demo/#ble-connectivity-test","title":"BLE Connectivity Test","text":"<p>The application exposes a Nordic LED Button Service (LBS). It sends the state of USR button on the board to the connected device, such as a phone or tablet. The nRF Blinky app can display the received button state and control the state of Green LED on the board. Test it by performing the following steps:</p> <ol> <li> <p>Open the nRF Blinky app, observe that the board is advertising with the Device Name Nordic_LBS.</p> <p></p> </li> <li> <p>Tap Nordic_LBS to establish a connection with the board, then:</p> <ul> <li>Toggle the LED switch in the app to turn the Green LED ON/OFF</li> <li>Press the USR button on the board, and the app will show its state (Pressed/Released)</li> </ul> <p></p> </li> </ol>"},{"location":"guides/ncs/samples/","title":"Samples","text":"<p>We provides samples that specifically target the nRF54L15 Connect Kit and show how to implement typical use cases with Nordic Semiconductor libraries and drivers.</p> <p>Samples showcase a single feature or library, while Applications include a variety of libraries to implement a specific use case.</p> <ul> <li>Hello World</li> <li>Blinky</li> <li>Button</li> <li>ADC</li> <li>Die Temperature Polling</li> <li>BME68X Gas Sensor</li> <li>Shell</li> <li>System OFF</li> <li>NFC Launch App</li> <li>NFC Text Record</li> <li>NFC URI Record</li> <li>NFC Writable NDEF Message</li> <li>NFC System OFF</li> <li>Bluetooth Low Energy: Beacon</li> <li>Bluetooth Low Energy: Observer</li> <li>Bluetooth Low Energy: Channel Sounding</li> <li>Bluetooth Low Energy: Peripheral LBS</li> <li>Bluetooth Low Energy: Peripheral HIDS Keyboard</li> <li>Bluetooth Low Energy: Peripheral HIDS Mouse</li> <li>Bluetooth Low Energy: NUS Shell Transport</li> <li>Thread: CLI</li> <li>Thread: CoAP</li> <li>Thread: Co-processor</li> </ul> <p>The Zephyr Project and the nRF Connect SDK also provide a comprehensive collection of samples and demos. Refer to their documentation for more details:</p> <ul> <li>Zephyr Samples and Demos</li> <li>nRF Connect SDK Samples and Demos</li> </ul>"},{"location":"guides/ncs/samples/adc/","title":"ADC","text":""},{"location":"guides/ncs/samples/adc/#overview","title":"Overview","text":"<p>This sample demonstrates how to use the ADC driver API. It reads ADC samples from two channels specified in the devicetree and prints the readings on the console. If voltage of the used reference can be obtained, the raw readings are converted to millivolts.</p> <p>Here is a minimal devicetree fragment which supports this sample.</p> nrf54l15_connectkit_nrf54l15_cpuapp.overlay<pre><code>/ {\n    zephyr,user {\n        io-channels = &lt;&amp;adc 0&gt;, &lt;&amp;adc 1&gt;;\n    };\n};\n\n&amp;adc {\n    #address-cells = &lt;1&gt;;\n    #size-cells = &lt;0&gt;;\n\n    channel@0 {\n        reg = &lt;0&gt;;\n        zephyr,gain = \"ADC_GAIN_1_4\";\n        zephyr,reference = \"ADC_REF_INTERNAL\";\n        zephyr,acquisition-time = &lt;ADC_ACQ_TIME_DEFAULT&gt;;\n        zephyr,input-positive = &lt;NRF_SAADC_AIN0&gt;; /* P1.04 */\n        zephyr,resolution = &lt;10&gt;;\n    };\n\n    channel@1 {\n        reg = &lt;1&gt;;\n        zephyr,gain = \"ADC_GAIN_1_4\";\n        zephyr,reference = \"ADC_REF_INTERNAL\";\n        zephyr,acquisition-time = &lt;ADC_ACQ_TIME_DEFAULT&gt;;\n        zephyr,input-positive = &lt;NRF_SAADC_VDD&gt;;\n        zephyr,resolution = &lt;12&gt;;\n        zephyr,oversampling = &lt;8&gt;;\n    };\n};\n</code></pre> <p>As shown, AIN0 is assigned to Channel 0, and VDD_GPIO to Channel 1.</p>"},{"location":"guides/ncs/samples/adc/#requirements","title":"Requirements","text":"<p>Before you start, check that you have the required hardware and software:</p> <ul> <li>1x nRF54L15 Connect Kit</li> <li>1x USB-C Cable</li> <li>A computer running macOS, Ubuntu, or Windows 10 or newer</li> </ul>"},{"location":"guides/ncs/samples/adc/#building-the-sample","title":"Building the sample","text":"<p>To build the sample, follow the instructions in Getting Started Guide to set up your preferred building environment.</p> <p>Use the following steps to build the ADC sample on the command line.</p> <ol> <li> <p>Open a terminal window.</p> </li> <li> <p>Go to <code>NCS-Project/nrf54l15-connectkit</code> repository cloned in the Getting Started Guide.</p> </li> <li> <p>Build the sample using the <code>west build</code> command, specifying the board (following the <code>-b</code> option) as <code>nrf54l15_connectkit/nrf54l15/cpuapp</code>.</p> <pre><code>west build -p always -b nrf54l15_connectkit/nrf54l15/cpuapp samples/adc\n</code></pre> <p>Tip</p> <p>The <code>-p</code> always option forces a pristine build, and is recommended for new users. Users may also use the <code>-p auto</code> option, which will use heuristics to determine if a pristine build is required, such as when building another sample.</p> </li> <li> <p>After building the sample successfully, the firmware with the name <code>merged.hex</code> can be found in the <code>build</code> directory.</p> </li> </ol>"},{"location":"guides/ncs/samples/adc/#flashing-the-firmware","title":"Flashing the firmware","text":"<p>Connect the nRF54L15 Connect Kit to the computer with a USB-C cable:</p> <p></p> <p>Then flash the sample using <code>west flash</code>:</p> <pre><code>west flash\n</code></pre> <p>Tip</p> <p>In case you wonder, the <code>west flash</code> will execute the following command:</p> <pre><code>pyocd load --target nrf54l --frequency 4000000 build/merged.hex\n</code></pre>"},{"location":"guides/ncs/samples/adc/#testing","title":"Testing","text":"<p>After programming the sample, test it by performing the following steps:</p> <ol> <li> <p>Open up a serial terminal, specifying the primary COM port that your computer uses to communicate with the nRF54L15:</p> WindowsmacOSUbuntu <ol> <li>Start PuTTY.</li> <li> <p>Configure the correct serial port and click Open:</p> <p></p> </li> </ol> <p>Open up a terminal and run:</p> <pre><code>screen &lt;serial-port-name&gt; 115200\n</code></pre> <p>Open up a terminal and run:</p> <pre><code>screen &lt;serial-port-name&gt; 115200\n</code></pre> </li> <li> <p>Press the DFU/RST button to reset the nRF54L15.</p> </li> <li> <p>Observe the output of the terminal. You should see the output, similar to what is shown in the following:</p> Terminal<pre><code>*** Booting nRF Connect SDK v3.1.0-6c6e5b32496e ***\n*** Using Zephyr OS v4.1.99-1612683d4010 ***\nADC reading[0]:\n- adc@d5000, channel 0: 85 = 298 mV\n- adc@d5000, channel 1: 3740 = 3287 mV\nADC reading[1]:\n- adc@d5000, channel 0: 36 = 126 mV\n- adc@d5000, channel 1: 3740 = 3287 mV\nADC reading[2]:\n- adc@d5000, channel 0: 83 = 291 mV\n- adc@d5000, channel 1: 3741 = 3287 mV\nADC reading[3]:\n- adc@d5000, channel 0: 37 = 130 mV\n- adc@d5000, channel 1: 3742 = 3288 mV\n...\n</code></pre> </li> </ol>"},{"location":"guides/ncs/samples/blinky/","title":"Blinky","text":""},{"location":"guides/ncs/samples/blinky/#overview","title":"Overview","text":"<p>The Blinky sample blinks an LED forever using the GPIO API.</p> <p>The source code shows how to:</p> <ul> <li>Get a pin specification from the devicetree as a <code>gpio_dt_spec</code></li> <li>Configure the GPIO pin as an output</li> <li>Toggle the pin forever</li> </ul>"},{"location":"guides/ncs/samples/blinky/#requirements","title":"Requirements","text":"<p>Before you start, check that you have the required hardware and software:</p> <ul> <li>1x nRF54L15 Connect Kit</li> <li>1x USB-C Cable</li> <li>A computer running macOS, Ubuntu, or Windows 10 or newer</li> </ul>"},{"location":"guides/ncs/samples/blinky/#building-the-sample","title":"Building the sample","text":"<p>To build the sample, follow the instructions in Getting Started Guide to set up your preferred building environment.</p> <p>Use the following steps to build the Blinky sample on the command line.</p> <ol> <li> <p>Open a terminal window.</p> </li> <li> <p>Go to <code>NCS-Project/nrf54l15-connectkit</code> repository cloned in the Getting Started Guide.</p> </li> <li> <p>Build the sample using the <code>west build</code> command, specifying the board (following the <code>-b</code> option) as <code>nrf54l15_connectkit/nrf54l15/cpuapp</code>.</p> <pre><code>west build -p always -b nrf54l15_connectkit/nrf54l15/cpuapp samples/blinky\n</code></pre> <p>Tip</p> <p>The <code>-p</code> always option forces a pristine build, and is recommended for new users. Users may also use the <code>-p auto</code> option, which will use heuristics to determine if a pristine build is required, such as when building another sample.</p> </li> <li> <p>After building the sample successfully, the firmware with the name <code>merged.hex</code> can be found in the <code>build</code> directory.</p> </li> </ol>"},{"location":"guides/ncs/samples/blinky/#flashing-the-firmware","title":"Flashing the firmware","text":"<p>Connect the nRF54L15 Connect Kit to the computer with a USB-C cable:</p> <p></p> <p>Then flash the sample using <code>west flash</code>:</p> <pre><code>west flash\n</code></pre> <p>Tip</p> <p>In case you wonder, the <code>west flash</code> will execute the following command:</p> <pre><code>pyocd load --target nrf54l --frequency 4000000 build/merged.hex\n</code></pre>"},{"location":"guides/ncs/samples/blinky/#testing","title":"Testing","text":"<ol> <li> <p>After flashing the firmware to your board, the Green LED starts to blink.</p> <p></p> </li> <li> <p>Open up a serial terminal, specifying the primary COM port that your computer uses to communicate with the nRF54L15:</p> WindowsmacOSUbuntu <ol> <li>Start PuTTY.</li> <li> <p>Configure the correct serial port and click Open:</p> <p></p> </li> </ol> <p>Open up a terminal and run:</p> <pre><code>screen &lt;serial-port-name&gt; 115200\n</code></pre> <p>Open up a terminal and run:</p> <pre><code>screen &lt;serial-port-name&gt; 115200\n</code></pre> </li> <li> <p>Observe the output of the terminal. You should see the output, similar to what is shown in the following:</p> Terminal<pre><code>*** Booting nRF Connect SDK v3.1.0-6c6e5b32496e ***\n*** Using Zephyr OS v4.1.99-1612683d4010 ***\nLED state: OFF\nLED state: ON\nLED state: OFF\nLED state: ON\nLED state: OFF\nLED state: ON\nLED state: OFF\n...\n</code></pre> </li> </ol>"},{"location":"guides/ncs/samples/button/","title":"Button","text":""},{"location":"guides/ncs/samples/button/#overview","title":"Overview","text":"<p>A simple button sample demonstrates the use of GPIO input with interrupts. The sample prints a message to the console each time a button is pressed.</p>"},{"location":"guides/ncs/samples/button/#requirements","title":"Requirements","text":"<p>Before you start, check that you have the required hardware and software:</p> <ul> <li>1x nRF54L15 Connect Kit</li> <li>1x USB-C Cable</li> <li>A computer running macOS, Ubuntu, or Windows 10 or newer</li> </ul>"},{"location":"guides/ncs/samples/button/#building-the-sample","title":"Building the sample","text":"<p>To build the sample, follow the instructions in Getting Started Guide to set up your preferred building environment.</p> <p>Use the following steps to build the Button sample on the command line.</p> <ol> <li> <p>Open a terminal window.</p> </li> <li> <p>Go to <code>NCS-Project/nrf54l15-connectkit</code> repository cloned in the Getting Started Guide.</p> </li> <li> <p>Build the sample using the <code>west build</code> command, specifying the board (following the <code>-b</code> option) as <code>nrf54l15_connectkit/nrf54l15/cpuapp</code>.</p> <pre><code>west build -p always -b nrf54l15_connectkit/nrf54l15/cpuapp samples/button\n</code></pre> <p>Tip</p> <p>The <code>-p</code> always option forces a pristine build, and is recommended for new users. Users may also use the <code>-p auto</code> option, which will use heuristics to determine if a pristine build is required, such as when building another sample.</p> </li> <li> <p>After building the sample successfully, the firmware with the name <code>merged.hex</code> can be found in the <code>build</code> directory.</p> </li> </ol>"},{"location":"guides/ncs/samples/button/#flashing-the-firmware","title":"Flashing the firmware","text":"<p>Connect the nRF54L15 Connect Kit to the computer with a USB-C cable:</p> <p></p> <p>Then flash the sample using <code>west flash</code>:</p> <pre><code>west flash\n</code></pre> <p>Tip</p> <p>In case you wonder, the <code>west flash</code> will execute the following command:</p> <pre><code>pyocd load --target nrf54l --frequency 4000000 build/merged.hex\n</code></pre>"},{"location":"guides/ncs/samples/button/#testing","title":"Testing","text":"<p>After programming the sample, test it by performing the following steps:</p> <ol> <li> <p>Open up a serial terminal, specifying the primary COM port that your computer uses to communicate with the nRF54L15:</p> WindowsmacOSUbuntu <ol> <li>Start PuTTY.</li> <li> <p>Configure the correct serial port and click Open:</p> <p></p> </li> </ol> <p>Open up a terminal and run:</p> <pre><code>screen &lt;serial-port-name&gt; 115200\n</code></pre> <p>Open up a terminal and run:</p> <pre><code>screen &lt;serial-port-name&gt; 115200\n</code></pre> </li> <li> <p>Press the DFU/RST button to reset the nRF54L15.</p> </li> <li> <p>Press the USR button and observe the output of the terminal. You should see the output, similar to what is shown in the following:</p> Terminal<pre><code>*** Booting nRF Connect SDK v3.1.0-6c6e5b32496e ***\n*** Using Zephyr OS v4.1.99-1612683d4010 ***\nSet up button at gpio@10a000 pin 3\nSet up LED at gpio@10a000 pin 2\nPress the button\nButton pressed at 2962805\nButton pressed at 4708259\nButton pressed at 5604173\n...\n</code></pre> </li> </ol>"},{"location":"guides/ncs/samples/hello_world/","title":"Hello World","text":""},{"location":"guides/ncs/samples/hello_world/#overview","title":"Overview","text":"<p>The Hello World sample can be served as a start point of Zephyr application development. This sample is quite simple and just prints <code>Hello World</code> to the serial console.</p>"},{"location":"guides/ncs/samples/hello_world/#requirements","title":"Requirements","text":"<p>Before you start, check that you have the required hardware and software:</p> <ul> <li>1x nRF54L15 Connect Kit</li> <li>1x USB-C Cable</li> <li>A computer running macOS, Ubuntu, or Windows 10 or newer</li> </ul>"},{"location":"guides/ncs/samples/hello_world/#building-the-sample","title":"Building the sample","text":"<p>To build the sample, follow the instructions in Getting Started Guide to set up your preferred building environment.</p> <p>Use the following steps to build the Hello World sample on the command line.</p> <ol> <li> <p>Open a terminal window.</p> </li> <li> <p>Go to <code>NCS-Project/nrf54l15-connectkit</code> repository cloned in the Getting Started Guide.</p> </li> <li> <p>Build the sample using the <code>west build</code> command, specifying the board (following the <code>-b</code> option) as <code>nrf54l15_connectkit/nrf54l15/cpuapp</code>.</p> <pre><code>west build -p always -b nrf54l15_connectkit/nrf54l15/cpuapp samples/hello_world\n</code></pre> <p>Tip</p> <p>The <code>-p</code> always option forces a pristine build, and is recommended for new users. Users may also use the <code>-p auto</code> option, which will use heuristics to determine if a pristine build is required, such as when building another sample.</p> </li> <li> <p>After building the sample successfully, the firmware with the name <code>merged.hex</code> can be found in the <code>build</code> directory.</p> </li> </ol>"},{"location":"guides/ncs/samples/hello_world/#flashing-the-firmware","title":"Flashing the firmware","text":"<p>Connect the nRF54L15 Connect Kit to the computer with a USB-C cable:</p> <p></p> <p>Then flash the sample using <code>west flash</code>:</p> <pre><code>west flash\n</code></pre> <p>Tip</p> <p>In case you wonder, the <code>west flash</code> will execute the following command:</p> <pre><code>pyocd load --target nrf54l --frequency 4000000 build/merged.hex\n</code></pre>"},{"location":"guides/ncs/samples/hello_world/#testing","title":"Testing","text":"<p>After programming the sample, test it by performing the following steps:</p> <ol> <li> <p>Open up a serial terminal, specifying the primary COM port that your computer uses to communicate with the nRF54L15:</p> WindowsmacOSUbuntu <ol> <li>Start PuTTY.</li> <li> <p>Configure the correct serial port and click Open:</p> <p></p> </li> </ol> <p>Open up a terminal and run:</p> <pre><code>screen &lt;serial-port-name&gt; 115200\n</code></pre> <p>Open up a terminal and run:</p> <pre><code>screen &lt;serial-port-name&gt; 115200\n</code></pre> </li> <li> <p>Press the DFU/RST button to reset the nRF54L15.</p> </li> <li> <p>Observe the output of the terminal. You should see the output, similar to what is shown in the following:</p> Terminal<pre><code>*** Booting nRF Connect SDK v3.1.0-6c6e5b32496e ***\n*** Using Zephyr OS v4.1.99-1612683d4010 ***\n[0] Hello World! nrf54l15_connectkit/nrf54l15/cpuapp\n[1] Hello World! nrf54l15_connectkit/nrf54l15/cpuapp\n[2] Hello World! nrf54l15_connectkit/nrf54l15/cpuapp\n[3] Hello World! nrf54l15_connectkit/nrf54l15/cpuapp\n...\n</code></pre> </li> </ol>"},{"location":"guides/ncs/samples/shell/","title":"Shell","text":""},{"location":"guides/ncs/samples/shell/#overview","title":"Overview","text":"<p>The Shell sample shows you how to register a custom command into the Zephyr Shell. The following custom command will be registered:</p> <ul> <li><code>version</code>: Show the kernel version.</li> </ul>"},{"location":"guides/ncs/samples/shell/#requirements","title":"Requirements","text":"<p>Before you start, check that you have the required hardware and software:</p> <ul> <li>1x nRF54L15 Connect Kit</li> <li>1x USB-C Cable</li> <li>A computer running macOS, Ubuntu, or Windows 10 or newer</li> </ul>"},{"location":"guides/ncs/samples/shell/#building-the-sample","title":"Building the sample","text":"<p>To build the sample, follow the instructions in Getting Started Guide to set up your preferred building environment.</p> <p>Use the following steps to build the Shell sample on the command line.</p> <ol> <li> <p>Open a terminal window.</p> </li> <li> <p>Go to <code>NCS-Project/nrf54l15-connectkit</code> repository cloned in the Getting Started Guide.</p> </li> <li> <p>Build the sample using the <code>west build</code> command, specifying the board (following the <code>-b</code> option) as <code>nrf54l15_connectkit/nrf54l15/cpuapp</code>.</p> <pre><code>west build -p always -b nrf54l15_connectkit/nrf54l15/cpuapp samples/shell\n</code></pre> <p>Tip</p> <p>The <code>-p</code> always option forces a pristine build, and is recommended for new users. Users may also use the <code>-p auto</code> option, which will use heuristics to determine if a pristine build is required, such as when building another sample.</p> </li> <li> <p>After building the sample successfully, the firmware with the name <code>merged.hex</code> can be found in the <code>build</code> directory.</p> </li> </ol>"},{"location":"guides/ncs/samples/shell/#flashing-the-firmware","title":"Flashing the firmware","text":"<p>Connect the nRF54L15 Connect Kit to the computer with a USB-C cable:</p> <p></p> <p>Then flash the sample using <code>west flash</code>:</p> <pre><code>west flash\n</code></pre> <p>Tip</p> <p>In case you wonder, the <code>west flash</code> will execute the following command:</p> <pre><code>pyocd load --target nrf54l --frequency 4000000 build/merged.hex\n</code></pre>"},{"location":"guides/ncs/samples/shell/#testing","title":"Testing","text":"<p>After programming the sample, test it by performing the following steps:</p> <ol> <li> <p>Open up a serial terminal, specifying the primary COM port that your computer uses to communicate with the nRF54L15:</p> WindowsmacOSUbuntu <ol> <li>Start PuTTY.</li> <li> <p>Configure the correct serial port and click Open:</p> <p></p> </li> </ol> <p>Open up a terminal and run:</p> <pre><code>screen &lt;serial-port-name&gt; 115200\n</code></pre> <p>Open up a terminal and run:</p> <pre><code>screen &lt;serial-port-name&gt; 115200\n</code></pre> </li> <li> <p>Press the DFU/RST button to reset the nRF54L15.</p> </li> <li> <p>Once the sample starts running, you should see the following output:</p> Terminal<pre><code>*** Booting nRF Connect SDK v3.1.0-6c6e5b32496e ***\n*** Using Zephyr OS v4.1.99-1612683d4010 ***\nuart:~$\n</code></pre> </li> <li> <p>Type <code>version</code> command and press the Enter key Enter . You should see the output, similar to what is shown in the following:</p> Terminal<pre><code>uart:~$ version\nZephyr version 4.1.99\n</code></pre> </li> </ol>"},{"location":"guides/ncs/samples/system_off/","title":"System OFF","text":""},{"location":"guides/ncs/samples/system_off/#overview","title":"Overview","text":"<p>The System OFF sample can be used for basic power measurement and as an example of deep sleep on the nRF54L15 Connect Kit.</p> <p>This sample can also demonstrate RAM retention. By selecting <code>CONFIG_APP_USE_RETAINED_MEM=y</code> state related to number of boots, number of times system off was entered, and total uptime since initial power-on are retained in a checksummed data structure. RAM is configured to keep the containing section powered while in system-off mode.</p>"},{"location":"guides/ncs/samples/system_off/#requirements","title":"Requirements","text":"<p>Before you start, check that you have the required hardware and software:</p> <ul> <li>1x nRF54L15 Connect Kit</li> <li>1x USB-C Cable</li> <li>A computer running macOS, Ubuntu, or Windows 10 or newer</li> </ul>"},{"location":"guides/ncs/samples/system_off/#building-the-sample","title":"Building the sample","text":"<p>To build the sample, follow the instructions in Getting Started Guide to set up your preferred building environment.</p> <p>Use the following steps to build the System OFF sample on the command line.</p> <ol> <li> <p>Open a terminal window.</p> </li> <li> <p>Go to <code>NCS-Project/nrf54l15-connectkit</code> repository cloned in the Getting Started Guide.</p> </li> <li> <p>Build the sample using the <code>west build</code> command, specifying the board (following the <code>-b</code> option) as <code>nrf54l15_connectkit/nrf54l15/cpuapp</code>.</p> DefaultRAM retention <pre><code>west build -p always -b nrf54l15_connectkit/nrf54l15/cpuapp samples/system_off\n</code></pre> <pre><code>west build -p always -b nrf54l15_connectkit/nrf54l15/cpuapp samples/system_off -- -DCONFIG_APP_USE_RETAINED_MEM=y\n</code></pre> <p>Tip</p> <p>The <code>-p</code> always option forces a pristine build, and is recommended for new users. Users may also use the <code>-p auto</code> option, which will use heuristics to determine if a pristine build is required, such as when building another sample.</p> </li> <li> <p>After building the sample successfully, the firmware with the name <code>merged.hex</code> can be found in the <code>build</code> directory.</p> </li> </ol>"},{"location":"guides/ncs/samples/system_off/#flashing-the-firmware","title":"Flashing the firmware","text":"<p>Connect the nRF54L15 Connect Kit to the computer with a USB-C cable:</p> <p></p> <p>Then flash the sample using <code>west flash</code>:</p> <pre><code>west flash\n</code></pre> <p>Tip</p> <p>In case you wonder, the <code>west flash</code> will execute the following command:</p> <pre><code>pyocd load --target nrf54l --frequency 4000000 build/merged.hex\n</code></pre>"},{"location":"guides/ncs/samples/system_off/#testing","title":"Testing","text":"<p>After programming the sample, test it by performing the following steps:</p> <ol> <li> <p>Open up a serial terminal, specifying the primary COM port that your computer uses to communicate with the nRF54L15:</p> WindowsmacOSUbuntu <ol> <li>Start PuTTY.</li> <li> <p>Configure the correct serial port and click Open:</p> <p></p> </li> </ol> <p>Open up a terminal and run:</p> <pre><code>screen &lt;serial-port-name&gt; 115200\n</code></pre> <p>Open up a terminal and run:</p> <pre><code>screen &lt;serial-port-name&gt; 115200\n</code></pre> </li> <li> <p>Press the DFU/RST button to reset the nRF54L15.</p> </li> <li> <p>Observe the output of the terminal. You should see the output, similar to what is shown in the following:</p> DefaultRAM retention Terminal<pre><code>*** Booting nRF Connect SDK v3.1.0-6c6e5b32496e ***\n*** Using Zephyr OS v4.1.99-1612683d4010 ***\n\nnrf54l15_connectkit system off demo\nOther wake up cause 0x00000001.\nRetained data not supported\nEntering system off; press sw0 to restart\n*** Booting nRF Connect SDK v3.1.0-6c6e5b32496e ***\n*** Using Zephyr OS v4.1.99-1612683d4010 ***\n\nnrf54l15_connectkit system off demo\nWakeup from System OFF by GPIO.\nRetained data not supported\nEntering system off; press sw0 to restart\n...\n</code></pre> Terminal<pre><code>*** Booting nRF Connect SDK v3.1.0-6c6e5b32496e ***\n*** Using Zephyr OS v4.1.99-1612683d4010 ***\n\nnrf54l15_connectkit system off demo\nOther wake up cause 0x00000001.\nRetained data: valid\nBoot count: 1\nOff count: 0\nActive Ticks: 548\nEntering system off; press sw0 to restart\n*** Booting nRF Connect SDK v3.1.0-6c6e5b32496e ***\n*** Using Zephyr OS v4.1.99-1612683d4010 ***\n\nnrf54l15_connectkit system off demo\nWakeup from System OFF by GPIO.\nRetained data: valid\nBoot count: 2\nOff count: 1\nActive Ticks: 317829\nEntering system off; press sw0 to restart\n...\n</code></pre> </li> </ol>"},{"location":"guides/ncs/samples/bluetooth/beacon/","title":"Bluetooth Low Energy: Beacon","text":""},{"location":"guides/ncs/samples/bluetooth/beacon/#overview","title":"Overview","text":"<p>The Bluetooth Low Energy Beacon sample demonstrates the GAP Broadcaster role functionality by advertising an Eddystone URL \"https://makerdiary.com\".</p>"},{"location":"guides/ncs/samples/bluetooth/beacon/#requirements","title":"Requirements","text":"<p>Before you start, check that you have the required hardware and software:</p> <ul> <li>1x nRF54L15 Connect Kit</li> <li>1x U.FL cabled 2.4 GHz Antenna (included in the box)</li> <li>1x USB-C Cable</li> <li>A smartphone or a tablet with nRF Connect for Mobile installed</li> <li>A computer running macOS, Ubuntu, or Windows 10 or newer</li> </ul>"},{"location":"guides/ncs/samples/bluetooth/beacon/#attaching-the-24-ghz-antenna","title":"Attaching the 2.4 GHz antenna","text":"<p>Before applying power to the board, ensure the U.FL cabled 2.4 GHz antenna is properly installed.</p> <p></p>"},{"location":"guides/ncs/samples/bluetooth/beacon/#building-the-sample","title":"Building the sample","text":"<p>To build the sample, follow the instructions in Getting Started Guide to set up your preferred building environment.</p> <p>Use the following steps to build the Beacon sample on the command line.</p> <ol> <li> <p>Open a terminal window.</p> </li> <li> <p>Go to <code>NCS-Project/nrf54l15-connectkit</code> repository cloned in the Getting Started Guide.</p> </li> <li> <p>Build the sample using the <code>west build</code> command, specifying the board (following the <code>-b</code> option) as <code>nrf54l15_connectkit/nrf54l15/cpuapp</code>.</p> <pre><code>west build -p always -b nrf54l15_connectkit/nrf54l15/cpuapp samples/bluetooth/beacon\n</code></pre> <p>Tip</p> <p>The <code>-p</code> always option forces a pristine build, and is recommended for new users. Users may also use the <code>-p auto</code> option, which will use heuristics to determine if a pristine build is required, such as when building another sample.</p> </li> <li> <p>After building the sample successfully, the firmware with the name <code>merged.hex</code> can be found in the <code>build</code> directory.</p> </li> </ol>"},{"location":"guides/ncs/samples/bluetooth/beacon/#flashing-the-firmware","title":"Flashing the firmware","text":"<p>Connect the nRF54L15 Connect Kit to the computer with a USB-C cable:</p> <p></p> <p>Then flash the sample using <code>west flash</code>:</p> <pre><code>west flash\n</code></pre> <p>Tip</p> <p>In case you wonder, the <code>west flash</code> will execute the following command:</p> <pre><code>pyocd load --target nrf54l --frequency 4000000 build/merged.hex\n</code></pre>"},{"location":"guides/ncs/samples/bluetooth/beacon/#testing","title":"Testing","text":"<p>After programming the sample, test it by performing the following steps:</p> <ol> <li> <p>Open up a serial terminal, specifying the primary COM port that your computer uses to communicate with the nRF54L15:</p> WindowsmacOSUbuntu <ol> <li>Start PuTTY.</li> <li> <p>Configure the correct serial port and click Open:</p> <p></p> </li> </ol> <p>Open up a terminal and run:</p> <pre><code>screen &lt;serial-port-name&gt; 115200\n</code></pre> <p>Open up a terminal and run:</p> <pre><code>screen &lt;serial-port-name&gt; 115200\n</code></pre> </li> <li> <p>Press the DFU/RST button to reset the nRF54L15.</p> </li> <li> <p>Observe the output of the terminal. You should see the output, similar to what is shown in the following:</p> Terminal<pre><code>*** Booting nRF Connect SDK v3.1.0-6c6e5b32496e ***\n*** Using Zephyr OS v4.1.99-1612683d4010 ***\nStarting Beacon Demo\n[00:14:15.167,500] &lt;inf&gt; bt_sdc_hci_driver: SoftDevice Controller build revision:\n                                            fc de 41 eb a2 d1 42 24  00 b5 f8 57 9f ac 9d 9e |..A...B$ ...W....\n                                            aa c9 b4 34                                      |...4\n[00:14:15.168,398] &lt;inf&gt; bt_hci_core: HW Platform: Nordic Semiconductor (0x0002)\n[00:14:15.168,412] &lt;inf&gt; bt_hci_core: HW Variant: nRF54Lx (0x0005)\n[00:14:15.168,424] &lt;inf&gt; bt_hci_core: Firmware: Standard Bluetooth controller (0x00) Version 252.16862 Build 1121034987\n[00:14:15.168,782] &lt;inf&gt; bt_hci_core: HCI transport: SDC\n[00:14:15.168,830] &lt;inf&gt; bt_hci_core: Identity: EF:11:48:A5:EA:6D (random)\n[00:14:15.168,844] &lt;inf&gt; bt_hci_core: HCI: version 6.1 (0x0f) revision 0x3069, manufacturer 0x0059\n[00:14:15.168,857] &lt;inf&gt; bt_hci_core: LMP: version 6.1 (0x0f) subver 0x3069\nBluetooth initialized\nBeacon started, advertising as EF:11:48:A5:EA:6D (random)\n</code></pre> </li> <li> <p>Open the nRF Connect for Mobile app, scan the device and observe that the beacon is advertising an Eddystone URL (https://makerdiary.com) with the Device Name Test beacon.</p> <p></p> </li> </ol>"},{"location":"guides/ncs/samples/bluetooth/channel_sounding/","title":"Bluetooth Low Energy: Channel Sounding","text":""},{"location":"guides/ncs/samples/bluetooth/channel_sounding/#overview","title":"Overview","text":"<p>This section provides instructions on utilizing the Bluetooth\u00ae Low Energy (BLE) Channel Sounding feature, which enables high-precision ranging measurements between devices. The feature involves two primary roles: Initiator with Ranging Requestor and Reflector with Ranging Responder.</p> <ul> <li> <p>Initiator with Ranging Requestor</p> <p>Act as a GATT Ranging Requestor client and configures the Channel Sounding initiator role.</p> <p> View Code</p> </li> <li> <p>Reflector with Ranging Responder</p> <p>Expose the GATT Ranging Responder Service and configures the Channel Sounding reflector role.</p> <p> View Code</p> </li> </ul>"},{"location":"guides/ncs/samples/bluetooth/channel_sounding/#requirements","title":"Requirements","text":"<p>Before you start, check that you have the required hardware and software:</p> <ul> <li>2x nRF54L15 Connect Kit with U.FL cabled 2.4 GHz Antenna</li> <li>2x USB-C Cable</li> <li>A computer running macOS, Ubuntu, or Windows 10 or newer</li> </ul>"},{"location":"guides/ncs/samples/bluetooth/channel_sounding/#attaching-the-24-ghz-antenna","title":"Attaching the 2.4 GHz antenna","text":"<p>Before applying power to the board, ensure the U.FL cabled 2.4 GHz antenna is properly installed.</p> <p></p>"},{"location":"guides/ncs/samples/bluetooth/channel_sounding/#building-the-samples","title":"Building the samples","text":"<p>To build the samples, follow the instructions in Getting Started Guide to set up your preferred building environment.</p> <p>Use the following steps to build the Initiator with Ranging Requestor and Reflector with Ranging Responder samples on the command line.</p> <ol> <li> <p>Open a terminal window.</p> </li> <li> <p>Go to <code>NCS-Project/nrf54l15-connectkit</code> repository cloned in the Getting Started Guide.</p> </li> <li> <p>Build the sample using the <code>west build</code> command, specifying the board (following the <code>-b</code> option) as <code>nrf54l15_connectkit/nrf54l15/cpuapp</code>.</p> InitiatorReflector <pre><code>west build -p always -b nrf54l15_connectkit/nrf54l15/cpuapp samples/bluetooth/channel_sounding_ras_initiator\n</code></pre> <pre><code>west build -p always -b nrf54l15_connectkit/nrf54l15/cpuapp samples/bluetooth/channel_sounding_ras_reflector\n</code></pre> <p>Tip</p> <p>The <code>-p</code> always option forces a pristine build, and is recommended for new users. Users may also use the <code>-p auto</code> option, which will use heuristics to determine if a pristine build is required, such as when building another sample.</p> </li> <li> <p>After building the sample successfully, the firmware with the name <code>merged.hex</code> can be found in the <code>build</code> directory.</p> </li> </ol>"},{"location":"guides/ncs/samples/bluetooth/channel_sounding/#flashing-the-firmware","title":"Flashing the firmware","text":"<p>Connect the nRF54L15 Connect Kit to the computer with a USB-C cable:</p> <p></p> <p>Then flash one device with the initiator application, and another device with the reflector application:</p> <pre><code>west flash\n</code></pre> <p>Tip</p> <p>In case you wonder, the <code>west flash</code> will execute the following command:</p> <pre><code>pyocd load --target nrf54l --frequency 4000000 build/merged.hex\n</code></pre>"},{"location":"guides/ncs/samples/bluetooth/channel_sounding/#testing","title":"Testing","text":"<p>After programming the initiator and the reflector, test them by performing the following steps:</p> <ol> <li> <p>Open up a serial terminal for each device, specifying the primary COM port that your computer uses to communicate with the nRF54L15:</p> WindowsmacOSUbuntu <ol> <li>Start PuTTY.</li> <li> <p>Configure the correct serial port and click Open:</p> <p></p> </li> </ol> <p>Open up a terminal and run:</p> <pre><code>screen &lt;serial-port-name&gt; 115200\n</code></pre> <p>Open up a terminal and run:</p> <pre><code>screen &lt;serial-port-name&gt; 115200\n</code></pre> </li> <li> <p>Press the DFU/RST button to reset the nRF54L15.</p> </li> <li> <p>Observe the output of the terminal. You should see the output, similar to what is shown in the following:</p> InitiatorReflector Terminal<pre><code>*** Booting nRF Connect SDK v3.1.0-6c6e5b32496e ***\n*** Using Zephyr OS v4.1.99-1612683d4010 ***\nI: Starting Channel Sounding Initiator Sample\nI: SoftDevice Controller build revision:\nI: fc de 41 eb a2 d1 42 24 |..A...B$\nI: 00 b5 f8 57 9f ac 9d 9e |...W....\nI: aa c9 b4 34             |...4\nI: HW Platform: Nordic Semiconductor (0x0002)\nI: HW Variant: nRF54Lx (0x0005)\nI: Firmware: Standard Bluetooth controller (0x00) Version 252.16862 Build 1121034987\nI: HCI transport: SDC\nI: Identity: EF:11:48:A5:EA:6D (random)\nI: HCI: version 6.1 (0x0f) revision 0x3069, manufacturer 0x0059\nI: LMP: version 6.1 (0x0f) subver 0x3069\nI: Filters matched. Address: F4:3D:C2:1E:6E:74 (random) connectable: 1\nI: Connecting\nI: Connected to F4:3D:C2:1E:6E:74 (random) (err 0x00)\nI: Security changed: F4:3D:C2:1E:6E:74 (random) level 2\nI: MTU exchange success (498)\nI: The discovery procedure succeeded\nI: Read RAS feature bits: 0x1\nI: CS capability exchange completed.\nI: CS config creation complete. ID: 0\nI: CS security enabled.\nI: CS procedures enabled:\n- config ID: 0\n- antenna configuration index: 0\n- TX power: 0 dbm\n- subevent length: 28198 us\n- subevents per event: 1\n- subevent interval: 0\n- event interval: 2\n- procedure interval: 5\n- procedure count: 0\n- maximum procedure length: 1000\nI: Distance estimates on antenna path 0: ifft: 1.610213, phase_slope: 2.249911, rtt: 13.750394\nI: Sleeping for a few seconds...\nI: Distance estimates on antenna path 0: ifft: 1.756596, phase_slope: 2.404551, rtt: 13.855685\nI: Sleeping for a few seconds...\nI: Distance estimates on antenna path 0: ifft: 1.756596, phase_slope: 2.046242, rtt: 13.543401\nI: Sleeping for a few seconds...\nI: Distance estimates on antenna path 0: ifft: 1.756596, phase_slope: 2.150647, rtt: 13.648731\nI: Sleeping for a few seconds...\n...\n</code></pre> Terminal<pre><code>*** Booting nRF Connect SDK v3.1.0-6c6e5b32496e ***\n*** Using Zephyr OS v4.1.99-1612683d4010 ***\nI: Starting Channel Sounding Reflector Sample\nI: SoftDevice Controller build revision:\nI: fc de 41 eb a2 d1 42 24 |..A...B$\nI: 00 b5 f8 57 9f ac 9d 9e |...W....\nI: aa c9 b4 34             |...4\nI: HW Platform: Nordic Semiconductor (0x0002)\nI: HW Variant: nRF54Lx (0x0005)\nI: Firmware: Standard Bluetooth controller (0x00) Version 252.16862 Build 1121034987\nI: HCI transport: SDC\nI: Identity: EF:11:48:A5:EA:6D (random)\nI: HCI: version 6.1 (0x0f) revision 0x3069, manufacturer 0x0059\nI: LMP: version 6.1 (0x0f) subver 0x3069\nI: Connected to EF:11:48:A5:EA:6D (random) (err 0x00)\nI: CS capability exchange completed.\nI: CS config creation complete. ID: 0\nI: CS security enabled.\nI: CS procedures enabled.\n...\n</code></pre> </li> </ol>"},{"location":"guides/ncs/samples/bluetooth/observer/","title":"Bluetooth Low Energy: Observer","text":""},{"location":"guides/ncs/samples/bluetooth/observer/#overview","title":"Overview","text":"<p>The Bluetooth Low Energy Observer sample demonstrates Bluetooth Low Energy Observer role functionality. The sample will periodically scan for devices nearby. If any found, prints the address of the device, the RSSI value, the Advertising type, and the Advertising data length to the console.</p> <p>If the used Bluetooth Low Energy Controller supports Extended Scanning, you may enable <code>CONFIG_BT_EXT_ADV</code> in the project configuration file. Refer to the project configuration file for further details.</p>"},{"location":"guides/ncs/samples/bluetooth/observer/#requirements","title":"Requirements","text":"<p>Before you start, check that you have the required hardware and software:</p> <ul> <li>1x nRF54L15 Connect Kit</li> <li>1x U.FL cabled 2.4 GHz Antenna (included in the box)</li> <li>1x USB-C Cable</li> <li>A computer running macOS, Ubuntu, or Windows 10 or newer</li> </ul>"},{"location":"guides/ncs/samples/bluetooth/observer/#attaching-the-24-ghz-antenna","title":"Attaching the 2.4 GHz antenna","text":"<p>Before applying power to the board, ensure the U.FL cabled 2.4 GHz antenna is properly installed.</p> <p></p>"},{"location":"guides/ncs/samples/bluetooth/observer/#building-the-sample","title":"Building the sample","text":"<p>To build the sample, follow the instructions in Getting Started Guide to set up your preferred building environment.</p> <p>Use the following steps to build the Observer sample on the command line.</p> <ol> <li> <p>Open a terminal window.</p> </li> <li> <p>Go to <code>NCS-Project/nrf54l15-connectkit</code> repository cloned in the Getting Started Guide.</p> </li> <li> <p>Build the sample using the <code>west build</code> command, specifying the board (following the <code>-b</code> option) as <code>nrf54l15_connectkit/nrf54l15/cpuapp</code>.</p> DefaultExtended Scanning <pre><code>west build -p always -b nrf54l15_connectkit/nrf54l15/cpuapp samples/bluetooth/observer\n</code></pre> <pre><code>west build -p always -b nrf54l15_connectkit/nrf54l15/cpuapp samples/bluetooth/observer -- -DCONF_FILE=\"prj_extended.conf\"\n</code></pre> <p>Tip</p> <p>The <code>-p</code> always option forces a pristine build, and is recommended for new users. Users may also use the <code>-p auto</code> option, which will use heuristics to determine if a pristine build is required, such as when building another sample.</p> </li> <li> <p>After building the sample successfully, the firmware with the name <code>merged.hex</code> can be found in the <code>build</code> directory.</p> </li> </ol>"},{"location":"guides/ncs/samples/bluetooth/observer/#flashing-the-firmware","title":"Flashing the firmware","text":"<p>Connect the nRF54L15 Connect Kit to the computer with a USB-C cable:</p> <p></p> <p>Then flash the sample using <code>west flash</code>:</p> <pre><code>west flash\n</code></pre> <p>Tip</p> <p>In case you wonder, the <code>west flash</code> will execute the following command:</p> <pre><code>pyocd load --target nrf54l --frequency 4000000 build/merged.hex\n</code></pre>"},{"location":"guides/ncs/samples/bluetooth/observer/#testing","title":"Testing","text":"<p>After programming the sample, test it by performing the following steps:</p> <ol> <li> <p>Open up a serial terminal, specifying the primary COM port that your computer uses to communicate with the nRF54L15:</p> WindowsmacOSUbuntu <ol> <li>Start PuTTY.</li> <li> <p>Configure the correct serial port and click Open:</p> <p></p> </li> </ol> <p>Open up a terminal and run:</p> <pre><code>screen &lt;serial-port-name&gt; 115200\n</code></pre> <p>Open up a terminal and run:</p> <pre><code>screen &lt;serial-port-name&gt; 115200\n</code></pre> </li> <li> <p>Press the DFU/RST button to reset the nRF54L15.</p> </li> <li> <p>Observe the output of the terminal. You should see the output, similar to what is shown in the following:</p> DefaultExtended Scanning Terminal<pre><code>*** Booting nRF Connect SDK v3.1.0-6c6e5b32496e ***\n*** Using Zephyr OS v4.1.99-1612683d4010 ***\nStarting Observer Demo\nStarted scanning...\nExiting main thread.\nDevice found: 5D:AB:ED:FA:8A:D5 (random) (RSSI -51), type 0, AD data len 30\nDevice found: 68:E4:78:39:7E:11 (public) (RSSI -66), type 0, AD data len 31\nDevice found: A4:C1:38:9C:59:F2 (public) (RSSI -62), type 0, AD data len 17\nDevice found: 73:87:FF:83:73:8B (random) (RSSI -75), type 0, AD data len 19\n...\n</code></pre> Terminal<pre><code>*** Booting nRF Connect SDK v3.1.0-6c6e5b32496e ***\n*** Using Zephyr OS v4.1.99-1612683d4010 ***\nStarting Observer Demo\nStarted scanning...\nExiting main thread.\nDevice found: 5C:31:F6:32:10:26 (random) (RSSI -39), type 0, AD data len 17\n[DEVICE]: 5C:31:F6:32:10:26 (random), AD evt type 0, Tx Pwr: 127, RSSI -39 Data status: 0, AD data len: 17 Name:  C:1 S:1 D:0 SR:0 E:0 Pri PHY: LE 1M, Sec PHY: No packets, Interval: 0x0000 (0 ms), SID: 255\nDevice found: 68:E4:78:39:7E:11 (public) (RSSI -64), type 0, AD data len 31\n[DEVICE]: 68:E4:78:39:7E:11 (public), AD evt type 0, Tx Pwr: 127, RSSI -64 Data status: 0, AD data len: 31 Name: U-RFR7E10 C:1 S:1 D:0 SR:0 E:0 Pri PHY: LE 1M, Sec PHY: No packets, Interval: 0x0000 (0 ms), SID: 255\nDevice found: 40:2A:8F:4E:93:81 (public) (RSSI -90), type 0, AD data len 27\n[DEVICE]: 40:2A:8F:4E:93:81 (public), AD evt type 0, Tx Pwr: 127, RSSI -90 Data status: 0, AD data len: 27 Name:  C:1 S:1 D:0 SR:0 E:0 Pri PHY: LE 1M, Sec PHY: No packets, Interval: 0x0000 (0 ms), SID: 255\n...\n</code></pre> </li> </ol>"},{"location":"guides/ncs/samples/bluetooth/peripheral_hids_keyboard/","title":"Bluetooth Low Energy: Peripheral HIDS Keyboard","text":""},{"location":"guides/ncs/samples/bluetooth/peripheral_hids_keyboard/#overview","title":"Overview","text":"<p>The Peripheral HIDS Keyboard sample demonstrates how to use the GATT Human Interface Device (HID) Service to implement a keyboard input device that you can connect to your computer.</p> <p>The sample uses the USR button to simulate the letter keys by generating letter keystrokes for a predefined string.</p>"},{"location":"guides/ncs/samples/bluetooth/peripheral_hids_keyboard/#requirements","title":"Requirements","text":"<p>Before you start, check that you have the required hardware and software:</p> <ul> <li>1x nRF54L15 Connect Kit</li> <li>1x U.FL cabled 2.4 GHz Antenna (included in the box)</li> <li>1x USB-C Cable</li> <li>A computer running macOS, Ubuntu, or Windows 10 or newer with Bluetooth LE supported</li> </ul>"},{"location":"guides/ncs/samples/bluetooth/peripheral_hids_keyboard/#attaching-the-24-ghz-antenna","title":"Attaching the 2.4 GHz antenna","text":"<p>Before applying power to the board, ensure the U.FL cabled 2.4 GHz antenna is properly installed.</p> <p></p>"},{"location":"guides/ncs/samples/bluetooth/peripheral_hids_keyboard/#building-the-sample","title":"Building the sample","text":"<p>To build the sample, follow the instructions in Getting Started Guide to set up your preferred building environment.</p> <p>Use the following steps to build the Peripheral HIDS Keyboard sample on the command line.</p> <ol> <li> <p>Open a terminal window.</p> </li> <li> <p>Go to <code>NCS-Project/nrf54l15-connectkit</code> repository cloned in the Getting Started Guide.</p> </li> <li> <p>Build the sample using the <code>west build</code> command, specifying the board (following the <code>-b</code> option) as <code>nrf54l15_connectkit/nrf54l15/cpuapp</code>.</p> <pre><code>west build -p always -b nrf54l15_connectkit/nrf54l15/cpuapp samples/bluetooth/peripheral_hids_keyboard\n</code></pre> <p>Tip</p> <p>The <code>-p</code> always option forces a pristine build, and is recommended for new users. Users may also use the <code>-p auto</code> option, which will use heuristics to determine if a pristine build is required, such as when building another sample.</p> </li> <li> <p>After building the sample successfully, the firmware with the name <code>merged.hex</code> can be found in the <code>build</code> directory.</p> </li> </ol>"},{"location":"guides/ncs/samples/bluetooth/peripheral_hids_keyboard/#flashing-the-firmware","title":"Flashing the firmware","text":"<p>Connect the nRF54L15 Connect Kit to the computer with a USB-C cable:</p> <p></p> <p>Then flash the sample using <code>west flash</code>:</p> <pre><code>west flash\n</code></pre> <p>Tip</p> <p>In case you wonder, the <code>west flash</code> will execute the following command:</p> <pre><code>pyocd load --target nrf54l --frequency 4000000 build/merged.hex\n</code></pre>"},{"location":"guides/ncs/samples/bluetooth/peripheral_hids_keyboard/#testing","title":"Testing","text":"<p>After programming the sample, test it by performing the following steps:</p> <ol> <li> <p>Open up a serial terminal, specifying the primary COM port that your computer uses to communicate with the nRF54L15:</p> WindowsmacOSUbuntu <ol> <li>Start PuTTY.</li> <li> <p>Configure the correct serial port and click Open:</p> <p></p> </li> </ol> <p>Open up a terminal and run:</p> <pre><code>screen &lt;serial-port-name&gt; 115200\n</code></pre> <p>Open up a terminal and run:</p> <pre><code>screen &lt;serial-port-name&gt; 115200\n</code></pre> </li> <li> <p>Press the DFU/RST button to reset the nRF54L15.</p> </li> <li> <p>Observe the output of the terminal. You should see the output, similar to what is shown in the following:</p> Terminal<pre><code>*** Booting nRF Connect SDK v3.1.0-6c6e5b32496e ***\n*** Using Zephyr OS v4.1.99-1612683d4010 ***\nStarting Bluetooth Peripheral HIDS keyboard sample\nBluetooth initialized\nAdvertising successfully started\n\nuart:~$\n</code></pre> </li> <li> <p>On your computer, search for Bluetooth devices and connect to the device named Nordic_HIDS_keyboard.</p> </li> <li> <p>When pairing, press USR button on the board to confirm the passkey value. Observe the output of the terminal:</p> Terminal<pre><code>Connected 3C:22:FB:4A:0A:79 (public)\nPasskey for 3C:22:FB:4A:0A:79 (public): 052475\nPress USR Button to confirm.\nNumeric Match, conn 0x20002360\nSecurity changed: 3C:22:FB:4A:0A:79 (public) level 4\nPairing completed: 3C:22:FB:4A:0A:79 (public), bonded: 1\n</code></pre> </li> <li> <p>Open a text editor on your computer, repeatedly press USR button on the board. Every button press sends one character of the test message <code>hello</code> (the test message includes a carriage return) to the computer, and this will be displayed in the text editor.</p> Visual Studio Code<pre><code>hello\nhello\nhello\n...\n</code></pre> </li> </ol> <p>Tip</p> <p>If pairing fails (e.g., after testing other Bluetooth examples), you can clear bond info with <code>bt clear all</code> command in the terminal and retry:</p> Terminal<pre><code>uart:~$ bt clear all\nPairings successfully cleared\n</code></pre>"},{"location":"guides/ncs/samples/bluetooth/peripheral_hids_mouse/","title":"Bluetooth Low Energy: Peripheral HIDS Mouse","text":""},{"location":"guides/ncs/samples/bluetooth/peripheral_hids_mouse/#overview","title":"Overview","text":"<p>The Peripheral HIDS Mouse sample demonstrates how to use the GATT Human Interface Device (HID) Service to implement a mouse input device that you can connect to your computer. This sample also shows how to perform directed advertising.</p> <p>You can also disable the directed advertising feature by clearing the <code>CONFIG_BT_DIRECTED_ADVERTISING</code> flag in the application configuration. This feature is enabled by default and it changes the way how advertising works in comparison to the other Bluetooth Low Energy samples. When the device wants to advertise, it starts with high duty cycle directed advertising provided that it has bonding information. If the timeout occurs, the device starts directed advertising to the next bonded peer. If all bonding information is used and there is still no connection, the regular advertising starts.</p> <p>This sample uses the USR button to simulate movement to the left.</p>"},{"location":"guides/ncs/samples/bluetooth/peripheral_hids_mouse/#requirements","title":"Requirements","text":"<p>Before you start, check that you have the required hardware and software:</p> <ul> <li>1x nRF54L15 Connect Kit</li> <li>1x U.FL cabled 2.4 GHz Antenna (included in the box)</li> <li>1x USB-C Cable</li> <li>A computer running macOS, Ubuntu, or Windows 10 or newer with Bluetooth LE supported</li> </ul>"},{"location":"guides/ncs/samples/bluetooth/peripheral_hids_mouse/#attaching-the-24-ghz-antenna","title":"Attaching the 2.4 GHz antenna","text":"<p>Before applying power to the board, ensure the U.FL cabled 2.4 GHz antenna is properly installed.</p> <p></p>"},{"location":"guides/ncs/samples/bluetooth/peripheral_hids_mouse/#building-the-sample","title":"Building the sample","text":"<p>To build the sample, follow the instructions in Getting Started Guide to set up your preferred building environment.</p> <p>Use the following steps to build the Peripheral HIDS Mouse sample on the command line.</p> <ol> <li> <p>Open a terminal window.</p> </li> <li> <p>Go to <code>NCS-Project/nrf54l15-connectkit</code> repository cloned in the Getting Started Guide.</p> </li> <li> <p>Build the sample using the <code>west build</code> command, specifying the board (following the <code>-b</code> option) as <code>nrf54l15_connectkit/nrf54l15/cpuapp</code>.</p> <pre><code>west build -p always -b nrf54l15_connectkit/nrf54l15/cpuapp samples/bluetooth/peripheral_hids_mouse\n</code></pre> <p>Tip</p> <p>The <code>-p</code> always option forces a pristine build, and is recommended for new users. Users may also use the <code>-p auto</code> option, which will use heuristics to determine if a pristine build is required, such as when building another sample.</p> </li> <li> <p>After building the sample successfully, the firmware with the name <code>merged.hex</code> can be found in the <code>build</code> directory.</p> </li> </ol>"},{"location":"guides/ncs/samples/bluetooth/peripheral_hids_mouse/#flashing-the-firmware","title":"Flashing the firmware","text":"<p>Connect the nRF54L15 Connect Kit to the computer with a USB-C cable:</p> <p></p> <p>Then flash the sample using <code>west flash</code>:</p> <pre><code>west flash\n</code></pre> <p>Tip</p> <p>In case you wonder, the <code>west flash</code> will execute the following command:</p> <pre><code>pyocd load --target nrf54l --frequency 4000000 build/merged.hex\n</code></pre>"},{"location":"guides/ncs/samples/bluetooth/peripheral_hids_mouse/#testing","title":"Testing","text":"<p>After programming the sample, test it by performing the following steps:</p> <ol> <li> <p>Open up a serial terminal, specifying the primary COM port that your computer uses to communicate with the nRF54L15:</p> WindowsmacOSUbuntu <ol> <li>Start PuTTY.</li> <li> <p>Configure the correct serial port and click Open:</p> <p></p> </li> </ol> <p>Open up a terminal and run:</p> <pre><code>screen &lt;serial-port-name&gt; 115200\n</code></pre> <p>Open up a terminal and run:</p> <pre><code>screen &lt;serial-port-name&gt; 115200\n</code></pre> </li> <li> <p>Press the DFU/RST button to reset the nRF54L15.</p> </li> <li> <p>Observe the output of the terminal. You should see the output, similar to what is shown in the following:</p> Terminal<pre><code>*** Booting nRF Connect SDK v3.1.0-6c6e5b32496e ***\n*** Using Zephyr OS v4.1.99-1612683d4010 ***\nStarting Bluetooth Peripheral HIDS mouse sample\nBluetooth initialized\nRegular advertising started\n\nuart:~$\n</code></pre> </li> <li> <p>On your computer, search for Bluetooth devices and connect to the device named Nordic_HIDS_mouse.</p> </li> <li> <p>When pairing, press USR button on the board to confirm the passkey value. Observe the output of the terminal:</p> Terminal<pre><code>Connected 3C:22:FB:4A:0A:79 (public)\nRegular advertising started\nPasskey for 3C:22:FB:4A:0A:79 (public): 816992\nPress USR Button to confirm.\nNumeric Match, conn 0x20002418\nSecurity changed: 3C:22:FB:4A:0A:79 (public) level 4\nPairing completed: 3C:22:FB:4A:0A:79 (public), bonded: 1\n</code></pre> </li> <li> <p>Repeatedly press USR button on the board. Observe the terminal output while observing the mouse pointer movement to the left on the screen.</p> Terminal<pre><code>button_changed(): left\nbutton_changed(): left\nbutton_changed(): left\nbutton_changed(): left\nbutton_changed(): left\nbutton_changed(): left\n...\n</code></pre> </li> </ol> <p>Tip</p> <p>If pairing fails (e.g., after testing other Bluetooth examples), you can clear bond info with <code>bt clear all</code> command in the terminal and retry:</p> Terminal<pre><code>uart:~$ bt clear all\nPairings successfully cleared\n</code></pre>"},{"location":"guides/ncs/samples/bluetooth/peripheral_lbs/","title":"Bluetooth Low Energy: Peripheral LBS","text":""},{"location":"guides/ncs/samples/bluetooth/peripheral_lbs/#overview","title":"Overview","text":"<p>The Peripheral LBS sample demonstrates how to use the LED Button Service (LBS).</p> <p>When connected, the sample sends the state of USR button on the board to the connected device, such as a phone or tablet. The mobile application on the device can display the received button state and control the state of Green LED on the board.</p>"},{"location":"guides/ncs/samples/bluetooth/peripheral_lbs/#requirements","title":"Requirements","text":"<p>Before you start, check that you have the required hardware and software:</p> <ul> <li>1x nRF54L15 Connect Kit</li> <li>1x U.FL cabled 2.4 GHz Antenna (included in the box)</li> <li>1x USB-C Cable</li> <li>A smartphone or a tablet with nRF Blinky installed</li> <li>A computer running macOS, Ubuntu, or Windows 10 or newer</li> </ul>"},{"location":"guides/ncs/samples/bluetooth/peripheral_lbs/#attaching-the-24-ghz-antenna","title":"Attaching the 2.4 GHz antenna","text":"<p>Before applying power to the board, ensure the U.FL cabled 2.4 GHz antenna is properly installed.</p> <p></p>"},{"location":"guides/ncs/samples/bluetooth/peripheral_lbs/#building-the-sample","title":"Building the sample","text":"<p>To build the sample, follow the instructions in Getting Started Guide to set up your preferred building environment.</p> <p>Use the following steps to build the Peripheral LBS sample on the command line.</p> <ol> <li> <p>Open a terminal window.</p> </li> <li> <p>Go to <code>NCS-Project/nrf54l15-connectkit</code> repository cloned in the Getting Started Guide.</p> </li> <li> <p>Build the sample using the <code>west build</code> command, specifying the board (following the <code>-b</code> option) as <code>nrf54l15_connectkit/nrf54l15/cpuapp</code>.</p> <pre><code>west build -p always -b nrf54l15_connectkit/nrf54l15/cpuapp samples/bluetooth/peripheral_lbs\n</code></pre> <p>Tip</p> <p>The <code>-p</code> always option forces a pristine build, and is recommended for new users. Users may also use the <code>-p auto</code> option, which will use heuristics to determine if a pristine build is required, such as when building another sample.</p> </li> <li> <p>After building the sample successfully, the firmware with the name <code>merged.hex</code> can be found in the <code>build</code> directory.</p> </li> </ol>"},{"location":"guides/ncs/samples/bluetooth/peripheral_lbs/#flashing-the-firmware","title":"Flashing the firmware","text":"<p>Connect the nRF54L15 Connect Kit to the computer with a USB-C cable:</p> <p></p> <p>Then flash the sample using <code>west flash</code>:</p> <pre><code>west flash\n</code></pre> <p>Tip</p> <p>In case you wonder, the <code>west flash</code> will execute the following command:</p> <pre><code>pyocd load --target nrf54l --frequency 4000000 build/merged.hex\n</code></pre>"},{"location":"guides/ncs/samples/bluetooth/peripheral_lbs/#testing","title":"Testing","text":"<p>After programming the sample, test it by performing the following steps:</p> <ol> <li> <p>Open up a serial terminal, specifying the primary COM port that your computer uses to communicate with the nRF54L15:</p> WindowsmacOSUbuntu <ol> <li>Start PuTTY.</li> <li> <p>Configure the correct serial port and click Open:</p> <p></p> </li> </ol> <p>Open up a terminal and run:</p> <pre><code>screen &lt;serial-port-name&gt; 115200\n</code></pre> <p>Open up a terminal and run:</p> <pre><code>screen &lt;serial-port-name&gt; 115200\n</code></pre> </li> <li> <p>Press the DFU/RST button to reset the nRF54L15.</p> </li> <li> <p>Observe the output of the terminal. You should see the output, similar to what is shown in the following:</p> Terminal<pre><code>*** Booting My Application v3.1.0-5da6f6aae060 ***\n*** Using nRF Connect SDK v3.1.0-6c6e5b32496e ***\n*** Using Zephyr OS v4.1.99-1612683d4010 ***\nStarting Bluetooth Peripheral LBS sample\nBluetooth initialized\nAdvertising successfully started\n</code></pre> </li> <li> <p>Open the nRF Blinky app, observe that the board is advertising with the Device Name Nordic_LBS.</p> <p></p> </li> <li> <p>Tap Nordic_LBS to establish a connection with the board, then:</p> <ul> <li>Toggle the LED switch in the app to turn the Green LED ON/OFF</li> <li>Press the USR button on the board, and the app will show its state (Pressed/Released)</li> </ul> <p></p> </li> </ol>"},{"location":"guides/ncs/samples/bluetooth/shell_bt_nus/","title":"Bluetooth Low Energy: NUS Shell Transport","text":""},{"location":"guides/ncs/samples/bluetooth/shell_bt_nus/#overview","title":"Overview","text":"<p>The Nordic UART Service (NUS) Shell Transport sample demonstrates how to use the Nordic UART Service (NUS) shell transport to receive shell commands from a remote device over Bluetooth</p> <p>When the connection is established, you can connect to the sample through the Nordic UART Service (NUS) by using a host application. You can then send shell commands that are executed on the device running the sample, and see the logs.</p>"},{"location":"guides/ncs/samples/bluetooth/shell_bt_nus/#requirements","title":"Requirements","text":"<p>Before you start, check that you have the required hardware and software:</p> <ul> <li>1x nRF54L15 Connect Kit</li> <li>1x U.FL cabled 2.4 GHz Antenna (included in the box)</li> <li>1x USB-C Cable</li> <li>Chrome browser with Web Bluetooth supported</li> <li>A computer running macOS, Ubuntu, or Windows 10 or newer</li> </ul>"},{"location":"guides/ncs/samples/bluetooth/shell_bt_nus/#attaching-the-24-ghz-antenna","title":"Attaching the 2.4 GHz antenna","text":"<p>Before applying power to the board, ensure the U.FL cabled 2.4 GHz antenna is properly installed.</p> <p></p>"},{"location":"guides/ncs/samples/bluetooth/shell_bt_nus/#building-the-sample","title":"Building the sample","text":"<p>To build the sample, follow the instructions in Getting Started Guide to set up your preferred building environment.</p> <p>Use the following steps to build the NUS Shell Transport sample on the command line.</p> <ol> <li> <p>Open a terminal window.</p> </li> <li> <p>Go to <code>NCS-Project/nrf54l15-connectkit</code> repository cloned in the Getting Started Guide.</p> </li> <li> <p>Build the sample using the <code>west build</code> command, specifying the board (following the <code>-b</code> option) as <code>nrf54l15_connectkit/nrf54l15/cpuapp</code>.</p> <pre><code>west build -p always -b nrf54l15_connectkit/nrf54l15/cpuapp samples/bluetooth/shell_bt_nus\n</code></pre> <p>Tip</p> <p>The <code>-p</code> always option forces a pristine build, and is recommended for new users. Users may also use the <code>-p auto</code> option, which will use heuristics to determine if a pristine build is required, such as when building another sample.</p> </li> <li> <p>After building the sample successfully, the firmware with the name <code>merged.hex</code> can be found in the <code>build</code> directory.</p> </li> </ol>"},{"location":"guides/ncs/samples/bluetooth/shell_bt_nus/#flashing-the-firmware","title":"Flashing the firmware","text":"<p>Connect the nRF54L15 Connect Kit to the computer with a USB-C cable:</p> <p></p> <p>Then flash the sample using <code>west flash</code>:</p> <pre><code>west flash\n</code></pre> <p>Tip</p> <p>In case you wonder, the <code>west flash</code> will execute the following command:</p> <pre><code>pyocd load --target nrf54l --frequency 4000000 build/merged.hex\n</code></pre>"},{"location":"guides/ncs/samples/bluetooth/shell_bt_nus/#testing","title":"Testing","text":"<p>After programming the sample, test it by performing the following steps:</p> <ol> <li> <p>Open up a serial terminal, specifying the primary COM port that your computer uses to communicate with the nRF54L15:</p> WindowsmacOSUbuntu <ol> <li>Start PuTTY.</li> <li> <p>Configure the correct serial port and click Open:</p> <p></p> </li> </ol> <p>Open up a terminal and run:</p> <pre><code>screen &lt;serial-port-name&gt; 115200\n</code></pre> <p>Open up a terminal and run:</p> <pre><code>screen &lt;serial-port-name&gt; 115200\n</code></pre> </li> <li> <p>Press the DFU/RST button to reset the nRF54L15.</p> </li> <li> <p>Observe the output of the terminal. You should see the output, similar to what is shown in the following:</p> Terminal<pre><code>*** Booting nRF Connect SDK v3.1.0-6c6e5b32496e ***\n*** Using Zephyr OS v4.1.99-1612683d4010 ***\nStarting Bluetooth NUS shell transport sample\nAdvertising successfully started\n\nuart:~$\n</code></pre> </li> <li> <p>Open the online Web Device CLI in the Chrome brower:</p> <p> Web Device CLI</p> </li> <li> <p>Click Connect to scan devices.</p> </li> <li>Pair  <code>BT_NUS_shell</code> discovered in the list.</li> <li>Run <code>help</code> to print the help message.</li> </ol> <p></p>"},{"location":"guides/ncs/samples/nfc/launch_app/","title":"NFC Launch App","text":""},{"location":"guides/ncs/samples/nfc/launch_app/#overview","title":"Overview","text":"<p>The NFC Launch App sample shows how to use the NFC tag to launch an app on the polling smartphone. It uses the NFC Data Exchange Format (NDEF) library.</p> <p>When the sample starts, it initializes the NFC tag and generates an NDEF message with two records that contain the app Universal Link and Android Application Record. Then it sets up the NFC library to use the generated message and sense the external NFC field.</p> <p>The only events handled by the application are the NFC events. The Green LED turns on when an NFC field is present.</p>"},{"location":"guides/ncs/samples/nfc/launch_app/#requirements","title":"Requirements","text":"<p>Before you start, check that you have the required hardware and software:</p> <ul> <li>1x nRF54L15 Connect Kit</li> <li>1x U.FL cabled 13.56 MHz NFC Antenna (included in the box)</li> <li>1x USB-C Cable</li> <li>A smartphone or a tablet with NFC support</li> <li>A computer running macOS, Ubuntu, or Windows 10 or newer</li> </ul>"},{"location":"guides/ncs/samples/nfc/launch_app/#attaching-the-nfc-antenna","title":"Attaching the NFC antenna","text":"<p>Before applying power to the board, ensure the U.FL cabled NFC antenna is properly installed.</p> <p></p>"},{"location":"guides/ncs/samples/nfc/launch_app/#building-the-sample","title":"Building the sample","text":"<p>To build the sample, follow the instructions in Getting Started Guide to set up your preferred building environment.</p> <p>Use the following steps to build the NFC Launch App sample on the command line.</p> <ol> <li> <p>Open a terminal window.</p> </li> <li> <p>Go to <code>NCS-Project/nrf54l15-connectkit</code> repository cloned in the Getting Started Guide.</p> </li> <li> <p>Build the sample using the <code>west build</code> command, specifying the board (following the <code>-b</code> option) as <code>nrf54l15_connectkit/nrf54l15/cpuapp</code>.</p> <pre><code>west build -p always -b nrf54l15_connectkit/nrf54l15/cpuapp samples/nfc/record_launch_app\n</code></pre> <p>Tip</p> <p>The <code>-p</code> always option forces a pristine build, and is recommended for new users. Users may also use the <code>-p auto</code> option, which will use heuristics to determine if a pristine build is required, such as when building another sample.</p> </li> <li> <p>After building the sample successfully, the firmware with the name <code>merged.hex</code> can be found in the <code>build</code> directory.</p> </li> </ol>"},{"location":"guides/ncs/samples/nfc/launch_app/#flashing-the-firmware","title":"Flashing the firmware","text":"<p>Connect the nRF54L15 Connect Kit to the computer with a USB-C cable:</p> <p></p> <p>Then flash the sample using <code>west flash</code>:</p> <pre><code>west flash\n</code></pre> <p>Tip</p> <p>In case you wonder, the <code>west flash</code> will execute the following command:</p> <pre><code>pyocd load --target nrf54l --frequency 4000000 build/merged.hex\n</code></pre>"},{"location":"guides/ncs/samples/nfc/launch_app/#testing","title":"Testing","text":"<p>After programming the sample, test it by performing the following steps:</p> <ol> <li> <p>Open up a serial terminal, specifying the primary COM port that your computer uses to communicate with the nRF54L15:</p> WindowsmacOSUbuntu <ol> <li>Start PuTTY.</li> <li> <p>Configure the correct serial port and click Open:</p> <p></p> </li> </ol> <p>Open up a terminal and run:</p> <pre><code>screen &lt;serial-port-name&gt; 115200\n</code></pre> <p>Open up a terminal and run:</p> <pre><code>screen &lt;serial-port-name&gt; 115200\n</code></pre> </li> <li> <p>Press the DFU/RST button to reset the nRF54L15.</p> </li> <li> <p>Once the sample starts running, you should see the following output:</p> Terminal<pre><code>*** Booting nRF Connect SDK v3.1.0-6c6e5b32496e ***\n*** Using Zephyr OS v4.1.99-1612683d4010 ***\nStarting NFC Launch App sample\nNFC configuration done\n</code></pre> </li> <li> <p>Touch the NFC antenna with the smartphone or tablet and observe that the Green LED blinks.</p> </li> <li> <p>Observe that the smartphone or tablet launches the nRF Toolbox application.</p> </li> </ol>"},{"location":"guides/ncs/samples/nfc/system_off/","title":"NFC System OFF","text":""},{"location":"guides/ncs/samples/nfc/system_off/#overview","title":"Overview","text":"<p>The NFC System OFF sample shows how to make the NFC Tag device wake up from the System OFF mode when it detects the NFC field. It uses the NFC Data Exchange Format (NDEF) library.</p> <p>The sample starts with the initialization of the NFC Tag device. The device then attempts to detect an external NFC field. If the field is not detected within three seconds, the device goes into the System OFF mode.</p> <p>The device wakes up from the System OFF mode when an NFC field is detected. The system is started and the NFC Tag device is reinitialized. The tag can be read afterwards.</p> <p>When the NFC field is not within range anymore, the device goes back to the System OFF mode.</p>"},{"location":"guides/ncs/samples/nfc/system_off/#requirements","title":"Requirements","text":"<p>Before you start, check that you have the required hardware and software:</p> <ul> <li>1x nRF54L15 Connect Kit</li> <li>1x U.FL cabled 13.56 MHz NFC Antenna (included in the box)</li> <li>1x USB-C Cable</li> <li>A smartphone or a tablet with NFC support</li> <li>A computer running macOS, Ubuntu, or Windows 10 or newer</li> </ul>"},{"location":"guides/ncs/samples/nfc/system_off/#attaching-the-nfc-antenna","title":"Attaching the NFC antenna","text":"<p>Before applying power to the board, ensure the U.FL cabled NFC antenna is properly installed.</p> <p></p>"},{"location":"guides/ncs/samples/nfc/system_off/#building-the-sample","title":"Building the sample","text":"<p>To build the sample, follow the instructions in Getting Started Guide to set up your preferred building environment.</p> <p>Use the following steps to build the NFC System OFF sample on the command line.</p> <ol> <li> <p>Open a terminal window.</p> </li> <li> <p>Go to <code>NCS-Project/nrf54l15-connectkit</code> repository cloned in the Getting Started Guide.</p> </li> <li> <p>Build the sample using the <code>west build</code> command, specifying the board (following the <code>-b</code> option) as <code>nrf54l15_connectkit/nrf54l15/cpuapp</code>.</p> <pre><code>west build -p always -b nrf54l15_connectkit/nrf54l15/cpuapp samples/nfc/system_off\n</code></pre> <p>Tip</p> <p>The <code>-p</code> always option forces a pristine build, and is recommended for new users. Users may also use the <code>-p auto</code> option, which will use heuristics to determine if a pristine build is required, such as when building another sample.</p> </li> <li> <p>After building the sample successfully, the firmware with the name <code>merged.hex</code> can be found in the <code>build</code> directory.</p> </li> </ol>"},{"location":"guides/ncs/samples/nfc/system_off/#flashing-the-firmware","title":"Flashing the firmware","text":"<p>Connect the nRF54L15 Connect Kit to the computer with a USB-C cable:</p> <p></p> <p>Then flash the sample using <code>west flash</code>:</p> <pre><code>west flash\n</code></pre> <p>Tip</p> <p>In case you wonder, the <code>west flash</code> will execute the following command:</p> <pre><code>pyocd load --target nrf54l --frequency 4000000 build/merged.hex\n</code></pre>"},{"location":"guides/ncs/samples/nfc/system_off/#testing","title":"Testing","text":"<p>After programming the sample, test it by performing the following steps:</p> <ol> <li> <p>Open up a serial terminal, specifying the primary COM port that your computer uses to communicate with the nRF54L15:</p> WindowsmacOSUbuntu <ol> <li>Start PuTTY.</li> <li> <p>Configure the correct serial port and click Open:</p> <p></p> </li> </ol> <p>Open up a terminal and run:</p> <pre><code>screen &lt;serial-port-name&gt; 115200\n</code></pre> <p>Open up a terminal and run:</p> <pre><code>screen &lt;serial-port-name&gt; 115200\n</code></pre> </li> <li> <p>Press the DFU/RST button to reset the nRF54L15.</p> </li> <li> <p>Once the sample starts running, you should see the following output:</p> Terminal<pre><code>*** Booting nRF Connect SDK v3.1.0-6c6e5b32496e ***\n*** Using Zephyr OS v4.1.99-1612683d4010 ***\nReset by pin-reset\nNFC configuration done\nPowering off.\nApproach a NFC reader to restart.\n</code></pre> </li> <li> <p>Observe that the Green LED turns off three seconds after the programming has completed. This indicates that the system is in the System OFF mode.</p> </li> <li> <p>Touch the NFC antenna with the smartphone or tablet.</p> </li> <li> <p>Observe that the Green LED is lit. It turns off after three seconds. This indicates that system is in the System OFF mode again. Expected terminal output:</p> Terminal<pre><code>*** Booting nRF Connect SDK v3.1.0-6c6e5b32496e ***\n*** Using Zephyr OS v4.1.99-1612683d4010 ***\nWake up by NFC field detect\nNFC configuration done\nPowering off.\nApproach a NFC reader to restart.\n</code></pre> </li> </ol>"},{"location":"guides/ncs/samples/nfc/text_record/","title":"NFC Text Record","text":""},{"location":"guides/ncs/samples/nfc/text_record/#overview","title":"Overview","text":"<p>The NFC Text Record sample shows how to use the NFC tag to expose a text record to NFC polling devices. It uses the NFC Data Exchange Format (NDEF) library.</p> <p>When the sample starts, it initializes the NFC tag and generates an NDEF message with three text records that contain the text \u201cHello World!\u201d in three languages. Then it sets up the NFC library to use the generated message and sense the external NFC field.</p> <p>The only events handled by the application are the NFC events. The Green LED turns on when an NFC field is present.</p>"},{"location":"guides/ncs/samples/nfc/text_record/#requirements","title":"Requirements","text":"<p>Before you start, check that you have the required hardware and software:</p> <ul> <li>1x nRF54L15 Connect Kit</li> <li>1x U.FL cabled 13.56 MHz NFC Antenna (included in the box)</li> <li>1x USB-C Cable</li> <li>A smartphone or a tablet with NFC support</li> <li>A computer running macOS, Ubuntu, or Windows 10 or newer</li> </ul>"},{"location":"guides/ncs/samples/nfc/text_record/#installing-nfc-tools-app","title":"Installing NFC Tools App","text":"<p>NFC Tools App can read and write your NFC tags with a simple and lightweight user interface.</p> <p> </p>"},{"location":"guides/ncs/samples/nfc/text_record/#attaching-the-nfc-antenna","title":"Attaching the NFC antenna","text":"<p>Before applying power to the board, ensure the U.FL cabled NFC antenna is properly installed.</p> <p></p>"},{"location":"guides/ncs/samples/nfc/text_record/#building-the-sample","title":"Building the sample","text":"<p>To build the sample, follow the instructions in Getting Started Guide to set up your preferred building environment.</p> <p>Use the following steps to build the NFC Text Record sample on the command line.</p> <ol> <li> <p>Open a terminal window.</p> </li> <li> <p>Go to <code>NCS-Project/nrf54l15-connectkit</code> repository cloned in the Getting Started Guide.</p> </li> <li> <p>Build the sample using the <code>west build</code> command, specifying the board (following the <code>-b</code> option) as <code>nrf54l15_connectkit/nrf54l15/cpuapp</code>.</p> <pre><code>west build -p always -b nrf54l15_connectkit/nrf54l15/cpuapp samples/nfc/record_text\n</code></pre> <p>Tip</p> <p>The <code>-p</code> always option forces a pristine build, and is recommended for new users. Users may also use the <code>-p auto</code> option, which will use heuristics to determine if a pristine build is required, such as when building another sample.</p> </li> <li> <p>After building the sample successfully, the firmware with the name <code>merged.hex</code> can be found in the <code>build</code> directory.</p> </li> </ol>"},{"location":"guides/ncs/samples/nfc/text_record/#flashing-the-firmware","title":"Flashing the firmware","text":"<p>Connect the nRF54L15 Connect Kit to the computer with a USB-C cable:</p> <p></p> <p>Then flash the sample using <code>west flash</code>:</p> <pre><code>west flash\n</code></pre> <p>Tip</p> <p>In case you wonder, the <code>west flash</code> will execute the following command:</p> <pre><code>pyocd load --target nrf54l --frequency 4000000 build/merged.hex\n</code></pre>"},{"location":"guides/ncs/samples/nfc/text_record/#testing","title":"Testing","text":"<p>After programming the sample, test it by performing the following steps:</p> <ol> <li> <p>Open up a serial terminal, specifying the primary COM port that your computer uses to communicate with the nRF54L15:</p> WindowsmacOSUbuntu <ol> <li>Start PuTTY.</li> <li> <p>Configure the correct serial port and click Open:</p> <p></p> </li> </ol> <p>Open up a terminal and run:</p> <pre><code>screen &lt;serial-port-name&gt; 115200\n</code></pre> <p>Open up a terminal and run:</p> <pre><code>screen &lt;serial-port-name&gt; 115200\n</code></pre> </li> <li> <p>Press the DFU/RST button to reset the nRF54L15.</p> </li> <li> <p>Once the sample starts running, you should see the following output:</p> Terminal<pre><code>*** Booting nRF Connect SDK v3.1.0-6c6e5b32496e ***\n*** Using Zephyr OS v4.1.99-1612683d4010 ***\nStarting NFC Text Record sample\nNFC configuration done\n</code></pre> </li> <li> <p>Open the NFC Tools app and tap the Read tab at the bottom.</p> </li> <li> <p>Touch the NFC antenna with the smartphone or tablet and observe that the Green LED blinks.</p> </li> <li> <p>The app will automatically detect and read the tag. Observe that the app displays the encoded text.</p> </li> </ol>"},{"location":"guides/ncs/samples/nfc/uri_record/","title":"NFC URI Record","text":""},{"location":"guides/ncs/samples/nfc/uri_record/#overview","title":"Overview","text":"<p>The NFC URI Record sample shows how to use the NFC tag to expose a URL record to NFC polling devices. It uses the NFC Data Exchange Format (NDEF) library.</p> <p>When the sample starts, it initializes the NFC tag and generates a URI message with a URI record containing the URL \"https://makerdiary.com\". Then it sets up the NFC library to use the generated message and sense the external NFC field.</p> <p>The only events handled by the application are the NFC events. The Green LED turns on when an NFC field is present.</p>"},{"location":"guides/ncs/samples/nfc/uri_record/#requirements","title":"Requirements","text":"<p>Before you start, check that you have the required hardware and software:</p> <ul> <li>1x nRF54L15 Connect Kit</li> <li>1x U.FL cabled 13.56 MHz NFC Antenna (included in the box)</li> <li>1x USB-C Cable</li> <li>A smartphone or a tablet with NFC support</li> <li>A computer running macOS, Ubuntu, or Windows 10 or newer</li> </ul>"},{"location":"guides/ncs/samples/nfc/uri_record/#attaching-the-nfc-antenna","title":"Attaching the NFC antenna","text":"<p>Before applying power to the board, ensure the U.FL cabled NFC antenna is properly installed.</p> <p></p>"},{"location":"guides/ncs/samples/nfc/uri_record/#building-the-sample","title":"Building the sample","text":"<p>To build the sample, follow the instructions in Getting Started Guide to set up your preferred building environment.</p> <p>Use the following steps to build the NFC URI Record sample on the command line.</p> <ol> <li> <p>Open a terminal window.</p> </li> <li> <p>Go to <code>NCS-Project/nrf54l15-connectkit</code> repository cloned in the Getting Started Guide.</p> </li> <li> <p>Build the sample using the <code>west build</code> command, specifying the board (following the <code>-b</code> option) as <code>nrf54l15_connectkit/nrf54l15/cpuapp</code>.</p> <pre><code>west build -p always -b nrf54l15_connectkit/nrf54l15/cpuapp samples/nfc/record_uri\n</code></pre> <p>Tip</p> <p>The <code>-p</code> always option forces a pristine build, and is recommended for new users. Users may also use the <code>-p auto</code> option, which will use heuristics to determine if a pristine build is required, such as when building another sample.</p> </li> <li> <p>After building the sample successfully, the firmware with the name <code>merged.hex</code> can be found in the <code>build</code> directory.</p> </li> </ol>"},{"location":"guides/ncs/samples/nfc/uri_record/#flashing-the-firmware","title":"Flashing the firmware","text":"<p>Connect the nRF54L15 Connect Kit to the computer with a USB-C cable:</p> <p></p> <p>Then flash the sample using <code>west flash</code>:</p> <pre><code>west flash\n</code></pre> <p>Tip</p> <p>In case you wonder, the <code>west flash</code> will execute the following command:</p> <pre><code>pyocd load --target nrf54l --frequency 4000000 build/merged.hex\n</code></pre>"},{"location":"guides/ncs/samples/nfc/uri_record/#testing","title":"Testing","text":"<p>After programming the sample, test it by performing the following steps:</p> <ol> <li> <p>Open up a serial terminal, specifying the primary COM port that your computer uses to communicate with the nRF54L15:</p> WindowsmacOSUbuntu <ol> <li>Start PuTTY.</li> <li> <p>Configure the correct serial port and click Open:</p> <p></p> </li> </ol> <p>Open up a terminal and run:</p> <pre><code>screen &lt;serial-port-name&gt; 115200\n</code></pre> <p>Open up a terminal and run:</p> <pre><code>screen &lt;serial-port-name&gt; 115200\n</code></pre> </li> <li> <p>Press the DFU/RST button to reset the nRF54L15.</p> </li> <li> <p>Once the sample starts running, you should see the following output:</p> Terminal<pre><code>*** Booting nRF Connect SDK v3.1.0-6c6e5b32496e ***\n*** Using Zephyr OS v4.1.99-1612683d4010 ***\nStarting NFC URI Record sample\nNFC configuration done\n</code></pre> </li> <li> <p>Touch the NFC antenna with the smartphone or tablet and observe that Green LED blinks.</p> </li> <li> <p>Observe that the smartphone or tablet tries to open the URL \"https://makerdiary.com\" in a web browser.</p> <p></p> </li> </ol>"},{"location":"guides/ncs/samples/nfc/writable_ndef_msg/","title":"NFC Writable NDEF Message","text":""},{"location":"guides/ncs/samples/nfc/writable_ndef_msg/#overview","title":"Overview","text":"<p>The NFC Writable NDEF Message sample shows how to use the NFC tag to expose an NDEF message that can be overwritten with any other NDEF message by an NFC device. It uses the NFC Data Exchange Format (NDEF) library.</p> <p>When the sample starts, it initializes the NFC tag and loads the NDEF message from the file in flash memory. If the NDEF message file does not exist, a default message is generated. It is a URI message with a URI record containing the URL \"https://makerdiary.com\". The sample then sets up the NFC library for the Type 4 Tag platform, which uses the NDEF message and senses the external NFC field.</p> <p>The library works in Read-Write emulation mode. In this mode, procedures for reading and updating an NDEF message are handled internally by the NFC library. Any changes to the NDEF message update the NDEF message file stored in flash memory.</p> <p>The Green LED indicates if an NFC field is present. Press the USR button during startup to restore the default NDEF message.</p>"},{"location":"guides/ncs/samples/nfc/writable_ndef_msg/#requirements","title":"Requirements","text":"<p>Before you start, check that you have the required hardware and software:</p> <ul> <li>1x nRF54L15 Connect Kit</li> <li>1x U.FL cabled 13.56 MHz NFC Antenna (included in the box)</li> <li>1x USB-C Cable</li> <li>A smartphone or a tablet with NFC support</li> <li>A computer running macOS, Ubuntu, or Windows 10 or newer</li> </ul>"},{"location":"guides/ncs/samples/nfc/writable_ndef_msg/#installing-nfc-tools-app","title":"Installing NFC Tools App","text":"<p>NFC Tools App can read and write your NFC tags with a simple and lightweight user interface.</p> <p> </p>"},{"location":"guides/ncs/samples/nfc/writable_ndef_msg/#attaching-the-nfc-antenna","title":"Attaching the NFC antenna","text":"<p>Before applying power to the board, ensure the U.FL cabled NFC antenna is properly installed.</p> <p></p>"},{"location":"guides/ncs/samples/nfc/writable_ndef_msg/#building-the-sample","title":"Building the sample","text":"<p>To build the sample, follow the instructions in Getting Started Guide to set up your preferred building environment.</p> <p>Use the following steps to build the NFC Writable NDEF Message sample on the command line.</p> <ol> <li> <p>Open a terminal window.</p> </li> <li> <p>Go to <code>NCS-Project/nrf54l15-connectkit</code> repository cloned in the Getting Started Guide.</p> </li> <li> <p>Build the sample using the <code>west build</code> command, specifying the board (following the <code>-b</code> option) as <code>nrf54l15_connectkit/nrf54l15/cpuapp</code>.</p> <pre><code>west build -p always -b nrf54l15_connectkit/nrf54l15/cpuapp samples/nfc/writable_ndef_msg\n</code></pre> <p>Tip</p> <p>The <code>-p</code> always option forces a pristine build, and is recommended for new users. Users may also use the <code>-p auto</code> option, which will use heuristics to determine if a pristine build is required, such as when building another sample.</p> </li> <li> <p>After building the sample successfully, the firmware with the name <code>merged.hex</code> can be found in the <code>build</code> directory.</p> </li> </ol>"},{"location":"guides/ncs/samples/nfc/writable_ndef_msg/#flashing-the-firmware","title":"Flashing the firmware","text":"<p>Connect the nRF54L15 Connect Kit to the computer with a USB-C cable:</p> <p></p> <p>Then flash the sample using <code>west flash</code>:</p> <pre><code>west flash\n</code></pre> <p>Tip</p> <p>In case you wonder, the <code>west flash</code> will execute the following command:</p> <pre><code>pyocd load --target nrf54l --frequency 4000000 build/merged.hex\n</code></pre>"},{"location":"guides/ncs/samples/nfc/writable_ndef_msg/#testing","title":"Testing","text":"<p>After programming the sample, test it by performing the following steps:</p> <ol> <li> <p>Open up a serial terminal, specifying the primary COM port that your computer uses to communicate with the nRF54L15:</p> WindowsmacOSUbuntu <ol> <li>Start PuTTY.</li> <li> <p>Configure the correct serial port and click Open:</p> <p></p> </li> </ol> <p>Open up a terminal and run:</p> <pre><code>screen &lt;serial-port-name&gt; 115200\n</code></pre> <p>Open up a terminal and run:</p> <pre><code>screen &lt;serial-port-name&gt; 115200\n</code></pre> </li> <li> <p>Press the DFU/RST button to reset the nRF54L15.</p> </li> <li> <p>Once the sample starts running, you should see the following output:</p> Terminal<pre><code>*** Booting nRF Connect SDK v3.1.0-6c6e5b32496e ***\n*** Using Zephyr OS v4.1.99-1612683d4010 ***\nStarting NFC Writable NDEF Message sample\nNDEF file record not found, creating default NDEF.\n</code></pre> </li> <li> <p>Touch the NFC antenna with the smartphone or tablet and observe that Green LED blinks.</p> </li> <li> <p>Observe that the smartphone or tablet tries to open the URL \"https://makerdiary.com\" in a web browser.</p> </li> <li> <p>Open NFC Tools app, tap the Write tab at the bottom of the screen and tap + Add a record to add your new NDEF records.</p> </li> <li> <p>Tap Write and touch the NFC antenna again to write the new message. If successful, you will see the following output:</p> Terminal<pre><code>NDEF message successfully flashed.\n</code></pre> </li> <li> <p>Go back to the Read tab and rescan the tag to confirm your new message appears. </p> </li> </ol>"},{"location":"guides/ncs/samples/sensor/bme68x_iaq/","title":"BME68X Gas Sensor","text":""},{"location":"guides/ncs/samples/sensor/bme68x_iaq/#overview","title":"Overview","text":"<p>The BME68X Gas Sensor sample sets up the BME68X gas sensor with the Bosch Sensor Environmental Cluster (BSEC) library.</p> <p>Here is the overlay file which supports this sample.</p> nrf54l15_connectkit_nrf54l15_cpuapp.overlay<pre><code>&amp;pinctrl {\n    i2c22_default: i2c22_default {\n        group1  {\n            psels = &lt;NRF_PSEL(TWIM_SCL, 1, 8)&gt;,\n                    &lt;NRF_PSEL(TWIM_SDA, 1, 9)&gt;;\n        };\n    };\n\n    i2c22_sleep: i2c22_sleep {\n        group1  {\n            psels = &lt;NRF_PSEL(TWIM_SCL, 1, 8)&gt;,\n                    &lt;NRF_PSEL(TWIM_SDA, 1, 9)&gt;;\n            low-power-enable;\n        };\n    };\n};\n\n&amp;i2c22 {\n    status = \"okay\";\n    zephyr,concat-buf-size = &lt;512&gt;;\n    pinctrl-0 = &lt;&amp;i2c22_default&gt;;\n    pinctrl-1 = &lt;&amp;i2c22_sleep&gt;;\n    pinctrl-names = \"default\", \"sleep\";\n\n    bme688: bme688@76 {\n        compatible = \"bosch,bme680\";\n        status = \"okay\";\n        reg = &lt;0x76&gt;;\n    };\n};\n</code></pre>"},{"location":"guides/ncs/samples/sensor/bme68x_iaq/#requirements","title":"Requirements","text":"<p>Before you start, check that you have the required hardware and software:</p> <ul> <li>1x nRF54L15 Connect Kit</li> <li>1x USB-C Cable</li> <li>1x BME688 Sensor (e.g., Seeed Studio's Grove - Air Quality Sensor(BME688))</li> <li>A computer running macOS, Ubuntu, or Windows 10 or newer</li> </ul>"},{"location":"guides/ncs/samples/sensor/bme68x_iaq/#wiring-the-sensor","title":"Wiring the sensor","text":"<p>Refer to the following figure for proper BME688 sensor connection to the nRF54L15 Connect Kit before applying power.</p> <p></p>"},{"location":"guides/ncs/samples/sensor/bme68x_iaq/#building-the-sample","title":"Building the sample","text":"<p>To build the sample, follow the instructions in Getting Started Guide to set up your preferred building environment.</p> <p>You can use the BME68X IAQ driver to run the Bosch Sensor Environmental Cluster (BSEC) library in order to get Indoor Air Quality (IAQ) readings.</p> <p>The BSEC library is distributed with a Bosch proprietary license (BSEC license) that prevents it from being part of nRF Connect SDK. To start using it, you have to accept the license and enable the download by running the following commands in the <code>nrf</code> folder:</p> <pre><code>west config manifest.group-filter +bsec\n</code></pre> <pre><code>west update\n</code></pre> <p>Use the following steps to build the BME68X Gas Sensor sample on the command line.</p> <ol> <li> <p>Open a terminal window.</p> </li> <li> <p>Go to <code>NCS-Project/nrf54l15-connectkit</code> repository cloned in the Getting Started Guide.</p> </li> <li> <p>Build the sample using the <code>west build</code> command, specifying the board (following the <code>-b</code> option) as <code>nrf54l15_connectkit/nrf54l15/cpuapp</code>.</p> <pre><code>west build -p always -b nrf54l15_connectkit/nrf54l15/cpuapp samples/sensor/bme68x_iaq\n</code></pre> <p>Tip</p> <p>The <code>-p</code> always option forces a pristine build, and is recommended for new users. Users may also use the <code>-p auto</code> option, which will use heuristics to determine if a pristine build is required, such as when building another sample.</p> </li> <li> <p>After building the sample successfully, the firmware with the name <code>merged.hex</code> can be found in the <code>build</code> directory.</p> </li> </ol>"},{"location":"guides/ncs/samples/sensor/bme68x_iaq/#flashing-the-firmware","title":"Flashing the firmware","text":"<p>Connect the nRF54L15 Connect Kit to the computer with a USB-C cable:</p> <p></p> <p>Then flash the sample using <code>west flash</code>:</p> <pre><code>west flash\n</code></pre> <p>Tip</p> <p>In case you wonder, the <code>west flash</code> will execute the following command:</p> <pre><code>pyocd load --target nrf54l --frequency 4000000 build/merged.hex\n</code></pre>"},{"location":"guides/ncs/samples/sensor/bme68x_iaq/#testing","title":"Testing","text":"<p>After programming the sample, test it by performing the following steps:</p> <ol> <li> <p>Open up a serial terminal, specifying the primary COM port that your computer uses to communicate with the nRF54L15:</p> WindowsmacOSUbuntu <ol> <li>Start PuTTY.</li> <li> <p>Configure the correct serial port and click Open:</p> <p></p> </li> </ol> <p>Open up a terminal and run:</p> <pre><code>screen &lt;serial-port-name&gt; 115200\n</code></pre> <p>Open up a terminal and run:</p> <pre><code>screen &lt;serial-port-name&gt; 115200\n</code></pre> </li> <li> <p>Press the DFU/RST button to reset the nRF54L15.</p> </li> <li> <p>Observe the output of the terminal. You should see the output, similar to what is shown in the following:</p> Terminal<pre><code>*** Booting nRF Connect SDK v3.1.0-6c6e5b32496e ***\n*** Using Zephyr OS v4.1.99-1612683d4010 ***\n[00:00:00.019,106] &lt;inf&gt; app: App started\n[00:00:06.044,229] &lt;inf&gt; app: temp: 29.605730; press: 99450.281250; humidity: 73.636467; iaq: 50; CO2: 500.000000; VOC: 0.499999\n[00:00:09.044,289] &lt;inf&gt; app: temp: 28.835971; press: 99446.812500; humidity: 76.732482; iaq: 50; CO2: 500.000000; VOC: 0.499999\n[00:00:12.044,412] &lt;inf&gt; app: temp: 28.715774; press: 99448.398437; humidity: 77.680435; iaq: 50; CO2: 500.000000; VOC: 0.499999\n[00:00:15.044,503] &lt;inf&gt; app: temp: 28.667188; press: 99448.679687; humidity: 78.038581; iaq: 50; CO2: 500.000000; VOC: 0.499999\n[00:00:18.044,594] &lt;inf&gt; app: temp: 28.593027; press: 99448.296875; humidity: 78.303268; iaq: 50; CO2: 500.000000; VOC: 0.499999\n[00:00:21.044,701] &lt;inf&gt; app: temp: 28.562335; press: 99448.992187; humidity: 78.380111; iaq: 50; CO2: 500.000000; VOC: 0.499999\n[00:00:24.044,839] &lt;inf&gt; app: temp: 28.523975; press: 99451.179687; humidity: 78.461883; iaq: 50; CO2: 500.000000; VOC: 0.499999\n...\n</code></pre> <p>Note</p> <p>BSEC takes about 24 hours to calibrate the indoor air quality (IAQ) output.</p> </li> </ol>"},{"location":"guides/ncs/samples/sensor/die_temp_polling/","title":"Die Temperature Polling","text":""},{"location":"guides/ncs/samples/sensor/die_temp_polling/#overview","title":"Overview","text":"<p>The Die Temperature Polling sample periodically reads temperature values (in \u00b0C) from the nRF54L15's die temperature sensor and prints the results to the serial console.</p> <p>To run this sample, enable the sensor node that supports <code>SENSOR_CHAN_DIE_TEMP</code> and create an alias named <code>die-temp0</code> to link to the node. Here is the overlay file which supports this sample.</p> nrf54l15_connectkit_nrf54l15_cpuapp.overlay<pre><code>/ {\n    aliases {\n        die-temp0 = &amp;temp;\n    };\n};\n</code></pre>"},{"location":"guides/ncs/samples/sensor/die_temp_polling/#requirements","title":"Requirements","text":"<p>Before you start, check that you have the required hardware and software:</p> <ul> <li>1x nRF54L15 Connect Kit</li> <li>1x USB-C Cable</li> <li>A computer running macOS, Ubuntu, or Windows 10 or newer</li> </ul>"},{"location":"guides/ncs/samples/sensor/die_temp_polling/#building-the-sample","title":"Building the sample","text":"<p>To build the sample, follow the instructions in Getting Started Guide to set up your preferred building environment.</p> <p>Use the following steps to build the Die Temperature Polling sample on the command line.</p> <ol> <li> <p>Open a terminal window.</p> </li> <li> <p>Go to <code>NCS-Project/nrf54l15-connectkit</code> repository cloned in the Getting Started Guide.</p> </li> <li> <p>Build the sample using the <code>west build</code> command, specifying the board (following the <code>-b</code> option) as <code>nrf54l15_connectkit/nrf54l15/cpuapp</code>.</p> <pre><code>west build -p always -b nrf54l15_connectkit/nrf54l15/cpuapp samples/sensor/die_temp_polling\n</code></pre> <p>Tip</p> <p>The <code>-p</code> always option forces a pristine build, and is recommended for new users. Users may also use the <code>-p auto</code> option, which will use heuristics to determine if a pristine build is required, such as when building another sample.</p> </li> <li> <p>After building the sample successfully, the firmware with the name <code>merged.hex</code> can be found in the <code>build</code> directory.</p> </li> </ol>"},{"location":"guides/ncs/samples/sensor/die_temp_polling/#flashing-the-firmware","title":"Flashing the firmware","text":"<p>Connect the nRF54L15 Connect Kit to the computer with a USB-C cable:</p> <p></p> <p>Then flash the sample using <code>west flash</code>:</p> <pre><code>west flash\n</code></pre> <p>Tip</p> <p>In case you wonder, the <code>west flash</code> will execute the following command:</p> <pre><code>pyocd load --target nrf54l --frequency 4000000 build/merged.hex\n</code></pre>"},{"location":"guides/ncs/samples/sensor/die_temp_polling/#testing","title":"Testing","text":"<p>After programming the sample, test it by performing the following steps:</p> <ol> <li> <p>Open up a serial terminal, specifying the primary COM port that your computer uses to communicate with the nRF54L15:</p> WindowsmacOSUbuntu <ol> <li>Start PuTTY.</li> <li> <p>Configure the correct serial port and click Open:</p> <p></p> </li> </ol> <p>Open up a terminal and run:</p> <pre><code>screen &lt;serial-port-name&gt; 115200\n</code></pre> <p>Open up a terminal and run:</p> <pre><code>screen &lt;serial-port-name&gt; 115200\n</code></pre> </li> <li> <p>Press the DFU/RST button to reset the nRF54L15.</p> </li> <li> <p>Observe the output of the terminal. You should see the output, similar to what is shown in the following:</p> Terminal<pre><code>*** Booting nRF Connect SDK v3.1.0-6c6e5b32496e ***\n*** Using Zephyr OS v4.1.99-1612683d4010 ***\nCPU Die temperature[temp@d7000]: 32.5 \u00b0C\nCPU Die temperature[temp@d7000]: 32.5 \u00b0C\nCPU Die temperature[temp@d7000]: 32.2 \u00b0C\nCPU Die temperature[temp@d7000]: 32.2 \u00b0C\nCPU Die temperature[temp@d7000]: 32.2 \u00b0C\nCPU Die temperature[temp@d7000]: 32.5 \u00b0C\n...\n</code></pre> </li> </ol>"},{"location":"guides/ncs/samples/thread/cli/","title":"Thread: CLI","text":""},{"location":"guides/ncs/samples/thread/cli/#overview","title":"Overview","text":"<p>The Thread CLI sample demonstrates how to send commands to a Thread device using the OpenThread Command Line Interface (CLI). The CLI is integrated into the Zephyr shell.</p>"},{"location":"guides/ncs/samples/thread/cli/#requirements","title":"Requirements","text":"<p>Before you start, check that you have the required hardware and software:</p> <ul> <li>2x nRF54L15 Connect Kit with U.FL cabled 2.4 GHz Antenna</li> <li>2x USB-C Cable</li> <li>A computer running macOS, Ubuntu, or Windows 10 or newer</li> </ul>"},{"location":"guides/ncs/samples/thread/cli/#attaching-the-24-ghz-antenna","title":"Attaching the 2.4 GHz antenna","text":"<p>Before applying power to the board, ensure the U.FL cabled 2.4 GHz antenna is properly installed.</p> <p></p>"},{"location":"guides/ncs/samples/thread/cli/#building-the-sample","title":"Building the sample","text":"<p>To build the sample, follow the instructions in Getting Started Guide to set up your preferred building environment.</p> <p>Use the following steps to build the Thread CLI sample on the command line.</p> <ol> <li> <p>Open a terminal window.</p> </li> <li> <p>Go to <code>NCS-Project/nrf54l15-connectkit</code> repository cloned in the Getting Started Guide.</p> </li> <li> <p>Build the sample using the <code>west build</code> command, specifying the board (following the <code>-b</code> option) as <code>nrf54l15_connectkit/nrf54l15/cpuapp</code>.</p> <pre><code>west build -p always -b nrf54l15_connectkit/nrf54l15/cpuapp samples/openthread/cli\n</code></pre> <p>Tip</p> <p>The <code>-p</code> always option forces a pristine build, and is recommended for new users. Users may also use the <code>-p auto</code> option, which will use heuristics to determine if a pristine build is required, such as when building another sample.</p> </li> <li> <p>After building the sample successfully, the firmware with the name <code>merged.hex</code> can be found in the <code>build</code> directory.</p> </li> </ol>"},{"location":"guides/ncs/samples/thread/cli/#flashing-the-firmware","title":"Flashing the firmware","text":"<p>Connect the nRF54L15 Connect Kit to the computer with a USB-C cable:</p> <p></p> <p>Then flash the sample using <code>west flash</code>:</p> <pre><code>west flash\n</code></pre> <p>Tip</p> <p>In case you wonder, the <code>west flash</code> will execute the following command:</p> <pre><code>pyocd load --target nrf54l --frequency 4000000 build/merged.hex\n</code></pre>"},{"location":"guides/ncs/samples/thread/cli/#testing","title":"Testing","text":"<p>After both boards are programmed with the CLI sample, complete the following steps to test communication between boards:</p> <ol> <li> <p>Connect to both boards with a terminal emulator, specifying the primary COM port that your computer uses to communicate with the nRF54L15:</p> WindowsmacOSUbuntu <ol> <li>Start PuTTY.</li> <li> <p>Configure the correct serial port and click Open:</p> <p></p> </li> </ol> <p>Open up a terminal and run:</p> <pre><code>screen &lt;serial-port-name&gt; 115200\n</code></pre> <p>Open up a terminal and run:</p> <pre><code>screen &lt;serial-port-name&gt; 115200\n</code></pre> </li> <li> <p>Press the DFU/RST button on both boards to reset the nRF54L15.</p> </li> <li> <p>Configure the required Thread network parameters with the <code>ot channel</code>, <code>ot panid</code>, and <code>ot networkkey</code> commands. Make sure to use the same parameters for all nodes that you add to the network. The following example uses the default OpenThread parameters:</p> Terminal<pre><code>uart:~$ ot channel 11\nDone\nuart:~$ ot panid 0xabcd\nDone\nuart:~$ ot networkkey 00112233445566778899aabbccddeeff\nDone\n</code></pre> </li> <li> <p>Enable the Thread network with the <code>ot ifconfig up</code> and <code>ot thread start</code> commands:</p> Terminal<pre><code>uart:~$ ot ifconfig up\nDone\nuart:~$ ot thread start\nDone\n</code></pre> </li> <li> <p>Invoke some of the OpenThread commands to obtain network-related details from each device:</p> Device-1Device-2 Terminal<pre><code>uart:~$ ot state\nleader\nDone\nuart:~$ ot networkname\nOpenThread\nDone\nuart:~$ ot ipaddr\nfdde:ad00:beef:0:0:ff:fe00:fc00\nfdde:ad00:beef:0:0:ff:fe00:1c00\nfdde:ad00:beef:0:7e01:5f90:7cda:5690\nfe80:0:0:0:bc1a:d6d8:9009:75a0\nDone\n</code></pre> Terminal<pre><code>uart:~$ ot state\nrouter\nDone\nuart:~$ ot networkname\nOpenThread\nDone\nuart:~$ ot ipaddr\nfdde:ad00:beef:0:0:ff:fe00:a800\nfdde:ad00:beef:0:1c64:740:cc44:1066\nfe80:0:0:0:e8a9:c27c:1a5:a188\nDone\n</code></pre> </li> <li> <p>Test communication between the devices with the <code>ot ping</code> command. For example:</p> Device-1Device-2 Terminal<pre><code>uart:~$ ot ping fdde:ad00:beef:0:1c64:740:cc44:1066\n16 bytes from fdde:ad00:beef:0:1c64:740:cc44:1066: icmp_seq=1 hlim=64 time=41ms\n1 packets transmitted, 1 packets received. Packet loss = 0.0%. Round-trip min/avg/max = 41/41.0/41 ms.\nDone\n</code></pre> Terminal<pre><code>uart:~$ ot ping fdde:ad00:beef:0:7e01:5f90:7cda:5690\n16 bytes from fdde:ad00:beef:0:7e01:5f90:7cda:5690: icmp_seq=1 hlim=64 time=11ms\n1 packets transmitted, 1 packets received. Packet loss = 0.0%. Round-trip min/avg/max = 11/11.0/11 ms.\nDone\n</code></pre> </li> </ol>"},{"location":"guides/ncs/samples/thread/coap/","title":"Thread: CoAP","text":""},{"location":"guides/ncs/samples/thread/coap/#overview","title":"Overview","text":"<p>The Thread CoAP sample demonstrates how to use OpenThread CoAP API. It can be built to work as a server or as a client.</p> <p>By running a client and server on two boards, a local Thread network can be created. To create the network, OpenThread uses the network key provided with Kconfig. Once the boards have been flashed, the network will be automatically created and configured.</p> <p>Once the network is operational, then the client could start interacting with the server. Every time the user presses the button, the LED on server should toggle.</p>"},{"location":"guides/ncs/samples/thread/coap/#requirements","title":"Requirements","text":"<p>Before you start, check that you have the required hardware and software:</p> <ul> <li>2x nRF54L15 Connect Kit with U.FL cabled 2.4 GHz Antenna</li> <li>2x USB-C Cable</li> <li>A computer running macOS, Ubuntu, or Windows 10 or newer</li> </ul>"},{"location":"guides/ncs/samples/thread/coap/#attaching-the-24-ghz-antenna","title":"Attaching the 2.4 GHz antenna","text":"<p>Before applying power to the board, ensure the U.FL cabled 2.4 GHz antenna is properly installed.</p> <p></p>"},{"location":"guides/ncs/samples/thread/coap/#building-the-sample","title":"Building the sample","text":"<p>To build the sample, follow the instructions in Getting Started Guide to set up your preferred building environment.</p> <p>Use the following steps to build the Thread CoAP sample on the command line.</p> <ol> <li> <p>Open a terminal window.</p> </li> <li> <p>Go to <code>NCS-Project/nrf54l15-connectkit</code> repository cloned in the Getting Started Guide.</p> </li> <li> <p>Build the sample using the <code>west build</code> command, specifying the board (following the <code>-b</code> option) as <code>nrf54l15_connectkit/nrf54l15/cpuapp</code>.</p> ServerClient <pre><code>west build -p always -b nrf54l15_connectkit/nrf54l15/cpuapp samples/openthread/coap -- -DCONFIG_OT_COAP_SAMPLE_SERVER=y\n</code></pre> <pre><code>west build -p always -b nrf54l15_connectkit/nrf54l15/cpuapp samples/openthread/coap\n</code></pre> <p>Tip</p> <p>The <code>-p</code> always option forces a pristine build, and is recommended for new users. Users may also use the <code>-p auto</code> option, which will use heuristics to determine if a pristine build is required, such as when building another sample.</p> </li> <li> <p>After building the sample successfully, the firmware with the name <code>merged.hex</code> can be found in the <code>build</code> directory.</p> </li> </ol>"},{"location":"guides/ncs/samples/thread/coap/#flashing-the-firmware","title":"Flashing the firmware","text":"<p>Connect the nRF54L15 Connect Kit to the computer with a USB-C cable:</p> <p></p> <p>Then flash the sample using <code>west flash</code>:</p> <pre><code>west flash\n</code></pre> <p>Tip</p> <p>In case you wonder, the <code>west flash</code> will execute the following command:</p> <pre><code>pyocd load --target nrf54l --frequency 4000000 build/merged.hex\n</code></pre>"},{"location":"guides/ncs/samples/thread/coap/#testing","title":"Testing","text":"<p>After both the server and the client are programmed, complete the following steps to test communication between boards:</p> <ol> <li> <p>Connect to both boards with a terminal emulator, specifying the primary COM port that your computer uses to communicate with the nRF54L15:</p> WindowsmacOSUbuntu <ol> <li>Start PuTTY.</li> <li> <p>Configure the correct serial port and click Open:</p> <p></p> </li> </ol> <p>Open up a terminal and run:</p> <pre><code>screen &lt;serial-port-name&gt; 115200\n</code></pre> <p>Open up a terminal and run:</p> <pre><code>screen &lt;serial-port-name&gt; 115200\n</code></pre> </li> <li> <p>Press the DFU/RST button on both boards to reset the nRF54L15.</p> </li> <li> <p>The Thread network will be automatically created and configured. Invoke some of the OpenThread commands to obtain network-related details from each device:</p> ServerClient Terminal<pre><code>server:~$ ot state\nleader\nDone\nserver:~$ ot networkname\nOpenThreadDemo\nDone\nserver:~$ ot ipaddr\nfdde:ad00:beef:0:0:ff:fe00:fc00\nfdde:ad00:beef:0:0:ff:fe00:2800\nfdde:ad00:beef:0:7d78:d429:f3e4:3903\nfe80:0:0:0:44b8:36d2:4cf7:cc9e\nDone\n</code></pre> Terminal<pre><code>client:~$ ot state\nrouter\nDone\nclient:~$ ot networkname\nOpenThreadDemo\nDone\nclient:~$ ot ipaddr\nfdde:ad00:beef:0:0:ff:fe00:3000\nfdde:ad00:beef:0:c53e:ecc0:e981:2524\nfe80:0:0:0:88b6:3602:586b:9c37\nDone\n</code></pre> </li> <li> <p>Press USR button on the client and you should see the Green LED on the server toggling.</p> </li> <li> <p>The example also provides a shell command to control the LED on the server from the client. To toggle the LED:</p> Client Terminal<pre><code>client:~$ ot_coap led set 0 toggle\n</code></pre> </li> <li> <p>You can also get the USR button state on the server from the client:</p> Client Terminal<pre><code>client:~$ ot_coap btn get 0\noff\nclient:~$ ot_coap btn get 0\non\n</code></pre> </li> <li> <p>The example uses the broadcast address by default. To control the LED of a specific server, we can use it IPv6 address:</p> Client Terminal<pre><code>client:~$ ot_coap led set 0 toggle fdde:ad00:beef:0:7d78:d429:f3e4:3903\n</code></pre> </li> </ol>"},{"location":"guides/ncs/samples/thread/coprocessor/","title":"Thread: Co-processor","text":""},{"location":"guides/ncs/samples/thread/coprocessor/#overview","title":"Overview","text":"<p>The Thread Co-processor sample demonstrates how to implement OpenThread\u2019s Co-processor designs inside the Zephyr environment. The sample uses the Radio co-processor (RCP) architecture.</p> <p>The sample is based on Zephyr\u2019s OpenThread co-processor sample. However, it customizes Zephyr\u2019s sample to fulfill the nRF Connect SDK requirements (for example, by increasing the stack size dedicated for the user application), and also extends it with features such as:</p> <ul> <li>Increased Mbed TLS heap size.</li> <li>Lowered main stack size to increase user application space.</li> <li>No obsolete configuration options.</li> <li>Vendor hooks for co-processor architecture allowing users to extend handled properties by their own, customized functionalities.</li> <li>Thread 1.2 features.</li> </ul>"},{"location":"guides/ncs/samples/thread/coprocessor/#requirements","title":"Requirements","text":"<p>Before you start, check that you have the required hardware and software:</p> <ul> <li>1x nRF54L15 Connect Kit</li> <li>1x U.FL cabled 2.4 GHz Antenna (included in the box)</li> <li>1x USB-C Cable</li> <li>A computer running macOS, Ubuntu, or Windows 10 or newer</li> </ul>"},{"location":"guides/ncs/samples/thread/coprocessor/#attaching-the-24-ghz-antenna","title":"Attaching the 2.4 GHz antenna","text":"<p>Before applying power to the board, ensure the U.FL cabled 2.4 GHz antenna is properly installed.</p> <p></p>"},{"location":"guides/ncs/samples/thread/coprocessor/#building-the-sample","title":"Building the sample","text":"<p>To build the sample, follow the instructions in Getting Started Guide to set up your preferred building environment.</p> <p>Use the following steps to build the Thread Co-processor sample on the command line.</p> <ol> <li> <p>Open a terminal window.</p> </li> <li> <p>Go to <code>NCS-Project/nrf54l15-connectkit</code> repository cloned in the Getting Started Guide.</p> </li> <li> <p>Build the sample using the <code>west build</code> command, specifying the board (following the <code>-b</code> option) as <code>nrf54l15_connectkit/nrf54l15/cpuapp</code>.</p> DefaultVendor hooks <pre><code>west build -p always -b nrf54l15_connectkit/nrf54l15/cpuapp samples/openthread/coprocessor\n</code></pre> <pre><code>west build -p always -b nrf54l15_connectkit/nrf54l15/cpuapp samples/openthread/coprocessor -- -DSNIPPET=\"ci;logging;vendor_hook\"\n</code></pre> <p>Tip</p> <p>The <code>-p</code> always option forces a pristine build, and is recommended for new users. Users may also use the <code>-p auto</code> option, which will use heuristics to determine if a pristine build is required, such as when building another sample.</p> </li> <li> <p>After building the sample successfully, the firmware with the name <code>merged.hex</code> can be found in the <code>build</code> directory.</p> </li> </ol>"},{"location":"guides/ncs/samples/thread/coprocessor/#flashing-the-firmware","title":"Flashing the firmware","text":"<p>Connect the nRF54L15 Connect Kit to the computer with a USB-C cable:</p> <p></p> <p>Then flash the sample using <code>west flash</code>:</p> <pre><code>west flash\n</code></pre> <p>Tip</p> <p>In case you wonder, the <code>west flash</code> will execute the following command:</p> <pre><code>pyocd load --target nrf54l --frequency 4000000 build/merged.hex\n</code></pre>"},{"location":"guides/ncs/samples/thread/coprocessor/#testing","title":"Testing","text":"<p>After programming the sample, test it by performing the following steps:</p> <ol> <li> <p>Connect the board to your computer using the USB-C Cable.</p> </li> <li> <p>Get the primary COM port that your computer uses to communicate with the nRF54L15 (e.g., <code>/dev/cu.usbmodem14502</code>).</p> </li> <li> <p>Build the OpenThread POSIX applications by performing the following steps:</p> <ol> <li> <p>Enter the openthread directory:</p> <pre><code>cd modules/lib/openthread\n</code></pre> </li> <li> <p>Install the OpenThread dependencies:</p> <pre><code>./script/bootstrap\n</code></pre> </li> <li> <p>Build the applications with the required options. For example, to build the <code>ot-cli</code> application, run the following command:</p> <pre><code>./script/cmake-build posix\n</code></pre> <p>Alternatively, to build the <code>ot-daemon</code> and <code>ot-ctl</code> applications, run the following command:</p> <pre><code>./script/cmake-build posix -DOT_DAEMON=ON\n</code></pre> </li> </ol> <p>You can find the generated applications in <code>./build/posix/src/posix/</code>.</p> </li> <li> <p>Use the following radio URL parameter to connect to the board:</p> <pre><code>'spinel+hdlc+uart://\\ *ncp_uart_device*\\ ?uart-baudrate=\\ *baud_rate*' -B *backbone_link*\n</code></pre> <p>Replace the following parameters:</p> <ul> <li><code>ncp_uart_device</code> - Specifies the location of the device, for example: <code>/dev/cu.usbmodem14502</code>.</li> <li><code>baud_rate</code> - Specifies the baud rate to use. The Thread Co-Processor sample supports baud rate <code>1000000</code>.</li> <li><code>backbone_link</code> - Specifies Backbone link for communication with external network. This parameter can be omitted.</li> </ul> Using <code>ot-cli</code>Using <code>ot-daemon</code> + <code>ot-ctl</code> <pre><code>sudo ./build/posix/src/posix/ot-cli 'spinel+hdlc+uart:///dev/cu.usbmodem14502?uart-baudrate=1000000' --verbose -B eth0\n</code></pre> <pre><code>sudo ./build/posix/src/posix/ot-daemon 'spinel+hdlc+uart:///dev/cu.usbmodem14502?uart-baudrate=1000000' --verbose -B eth0\n</code></pre> <p>And on a separate terminal window, specifying the Thread interface <code>utun4</code> shown in <code>ot-daemon</code> log output:</p> <pre><code>sudo ./build/posix/src/posix/ot-ctl -I utun4\n</code></pre> </li> <li> <p>From this point, you can follow the Testing instructions in the CLI sample by removing the <code>ot</code> prefix for each command.</p> </li> </ol>"},{"location":"guides/programming/","title":"Programming Guide","text":"<p>The nRF54L15 Connect Kit comes with an nRF52820-based Interface MCU for onboard debugging and programming, eliminating the need for external tools.</p> <p>This Programming Guide provides comprehensive instructions for programming the nRF54L15 and updating the Interface MCU Firmware.</p> <ul> <li> <p>Programming the nRF54L15</p> </li> <li> <p>Interface MCU Firmware Update</p> </li> </ul>"},{"location":"guides/programming/ifmcu-fw-update/","title":"Interface MCU Firmware Update","text":""},{"location":"guides/programming/ifmcu-fw-update/#overview","title":"Overview","text":"<p>This guide describes how you can update the application firmware and bootloader of the Interface MCU on the nRF54L15 Connect Kit.</p>"},{"location":"guides/programming/ifmcu-fw-update/#requirements","title":"Requirements","text":"<p>Before you start, check that you have the required hardware and software:</p> <ul> <li>1x nRF54L15 Connect Kit</li> <li>1x USB-C Cable</li> <li>A computer running macOS, Ubuntu, or Windows 10 or newer</li> </ul>"},{"location":"guides/programming/ifmcu-fw-update/#update-the-application-firmware","title":"Update the application firmware","text":"<p>The application firmware is compatible with the UF2 Bootloader, so that you can easily update the firmware by just copying the .uf2-format file to the flash drive without using an external programmer.</p> <p>Tip</p> <p>The pre-built firmware will be published on GitHub Releases. Alternatively, you may build your own firmware by completing the steps in the Interface MCU Firmware documentation. </p> <p>To update the firmware, complete the following steps:</p> <ol> <li> <p>Push and hold the DFU/RST button and connect your board to the USB port of your computer. Release the DFU/RST button after your board is connected.</p> </li> <li> <p>It will mount as a Mass Storage Device called UF2BOOT. The RGB LED is breathing in green.</p> </li> <li> <p>Drag and drop .uf2-format file onto the UF2BOOT volume. The RGB LED blinks green rapidly during programming.</p> </li> <li> <p>The application starts running after the firmware programming is completed.</p> </li> </ol> <p>Note</p> <p>You may experience the following errors when copying the firmware to the UF2BOOT drive on macOS 14.5 or newer:</p> <p></p> Terminal<pre><code>$ cp build/ifmcu_firmware/zephyr/zephyr.uf2 /Volumes/UF2BOOT\ncp: /Volumes/UF2BOOT/zephyr.uf2: fcopyfile failed: Input/output error\ncp: /Volumes/UF2BOOT/zephyr.uf2: fchmod failed: No such file or directory\n</code></pre> <p>Currently you can ignore these errors as the firmware programming is completed and the application should work as expected.</p>"},{"location":"guides/programming/ifmcu-fw-update/#update-the-uf2-bootloader","title":"Update the UF2 Bootloader","text":"<p>The UF2 Bootloader is self-upgradable, and you can simply update the bootloader by just copying the .uf2-format file to the flash drive without using an external programmer.</p> <p>Tip</p> <p>The pre-built bootloader will be published on GitHub Releases with the name <code>update-nrf54l15_connectkit_nrf52820_uf2boot-&lt;version&gt;.uf2</code>.</p> <p>To update the bootloader, complete the following steps:</p> <ol> <li> <p>Push and hold the DFU/RST button and connect your board to the USB port of your computer. Release the DFU/RST button after your board is connected.</p> </li> <li> <p>It will mount as a Mass Storage Device called UF2BOOT. The RGB LED is breathing in green.</p> </li> <li> <p>Open <code>INFO_UF2.TXT</code> in the UF2BOOT volume with a text editor, and check the current version of bootloader. The figure below shows we are running the <code>1.1.0</code> version.</p> <p></p> </li> <li> <p>Drag and drop a newer .uf2-format bootloader onto the UF2BOOT volume. The RGB LED blinks green rapidly during programming.</p> </li> <li> <p>The new bootloader starts running after the firmware programming is completed.</p> </li> <li>Re-enter the UF2 Bootloader mode, and verify the version printed in <code>INFO_UF2.TXT</code>.</li> </ol> <p>Note</p> <p>You may experience the following errors when copying the firmware to the UF2BOOT drive on macOS 14.5 or newer:</p> <p></p> Terminal<pre><code>$ cp build/ifmcu_firmware/zephyr/zephyr.uf2 /Volumes/UF2BOOT\ncp: /Volumes/UF2BOOT/zephyr.uf2: fcopyfile failed: Input/output error\ncp: /Volumes/UF2BOOT/zephyr.uf2: fchmod failed: No such file or directory\n</code></pre> <p>Currently you can ignore these errors as the firmware programming is completed and the application should work as expected.</p>"},{"location":"guides/programming/ifmcu-fw-update/#recovery-from-a-broken-uf2-bootloader","title":"Recovery from a broken UF2 Bootloader","text":"<p>If your device fails to enter the bootloader mode, you may need to perform a recovery from a broken UF2 bootloader. To re-program the UF2 Bootloader, an external debug probe is needed.</p> <p>Tip</p> <p>The pre-built bootloader will be published on GitHub Releases with the name <code>nrf54l15_connectkit_nrf52820_uf2boot-&lt;version&gt;.hex</code>.</p> <p>The SWD port of Interface MCU (nRF52820) is exposed on the bottom of the board. Note that the signal voltage levels of SWD should match to VDD_GPIO.</p> <p>The following figure illustrates the SWD port of the Interface MCU (nRF52820):</p> <p></p>"},{"location":"guides/programming/programming-the-nrf54l15/","title":"Programming the nRF54L15","text":""},{"location":"guides/programming/programming-the-nrf54l15/#overview","title":"Overview","text":"<p>This guide describes how to program the nRF54L15 on the nRF54L15 Connect Kit through the Interface MCU.</p>"},{"location":"guides/programming/programming-the-nrf54l15/#requirements","title":"Requirements","text":"<p>Before you start, check that you have the required hardware and software:</p> <ul> <li>1x nRF54L15 Connect Kit</li> <li>1x USB-C Cable</li> <li>Python 3.10.0 or newer</li> <li>pyOCD v0.38.0</li> <li>A computer running macOS, Ubuntu, or Windows 10 or newer</li> </ul> <p>Tip</p> <p>Python and pyOCD will be installed after setting up your development environment in Getting Started Guide.</p>"},{"location":"guides/programming/programming-the-nrf54l15/#installing-pyocd","title":"Installing pyOCD","text":"<p>To program the nRF54L15, a tool that supports the CMSIS-DAP protocol should be installed. pyOCD v0.38.0 or newer is required.</p> <p>The latest stable version of pyOCD may be installed via pip. Open up a terminal and run:</p> WindowsmacOSUbuntu <pre><code>py -3 -m pip install -U pyocd\n</code></pre> <pre><code>python3 -m pip install -U pyocd\n</code></pre> <pre><code>python3 -m pip install -U pyocd\n</code></pre> <p>Note</p> <p>On Linux, permission to access USB devices from user space must be explicitly granted via udev rules. See udev rules on Linux for detailed instructions. </p>"},{"location":"guides/programming/programming-the-nrf54l15/#connecting-the-board","title":"Connecting the board","text":"<p>Connect the nRF54L15 Connect Kit to your computer with a USB-C cable.</p> <p></p> <p>Enter the following command to list the connected device:</p> <pre><code>pyocd list\n</code></pre> <p>You should see the output, similar to what is shown in the following:</p> Terminal<pre><code>  #   Probe/Board              Unique ID               Target\n-----------------------------------------------------------------\n  0   ZEPHYR IFMCU CMSIS-DAP   820D9A5F0E322B8EFE662   \u2714\ufe0e nrf54l\n      Makerdiary               nRF54L15 Connect Kit\n</code></pre>"},{"location":"guides/programming/programming-the-nrf54l15/#programming-with-pyocd","title":"Programming with pyOCD","text":"<p>To program the nRF54L15 with pyOCD, complete the following steps:</p> <ol> <li> <p>Enter the following command to program the application firmware:</p> <pre><code>pyocd load -t nrf54l &lt;firmware.hex&gt; # (1)!\n</code></pre> <ol> <li>You can also use <code>pyocd flash</code> instead:     <pre><code>pyocd flash -t nrf54l &lt;firmware.hex&gt;\n</code></pre></li> </ol> </li> <li> <p>The RGB LED blinks blue rapidly during programming.</p> </li> <li>The application starts running after the firmware programming is completed. If not, press the DFU/RST button to reset the nRF54L15.</li> </ol> <p>In some cases, you may need to erase the entire non-volatile memory (RRAM) of the nRF54L15:</p> <pre><code>pyocd erase -t nrf54l --chip\n</code></pre>"}]}